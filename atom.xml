<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[闲池阁]]></title>
  <subtitle><![CDATA[宠辱不惊，看庭前花开花落。去留无意，望天空云卷云舒。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://seewhy.me/"/>
  <updated>2016-02-19T18:27:43.000Z</updated>
  <id>http://seewhy.me/</id>
  
  <author>
    <name><![CDATA[seewhy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android开发艺术探索读书笔记 第九章 四大组件的工作过程]]></title>
    <link href="http://seewhy.me/2016/02/20/artsearchreadnote9/"/>
    <id>http://seewhy.me/2016/02/20/artsearchreadnote9/</id>
    <published>2016-02-20T06:51:39.000Z</published>
    <updated>2016-02-19T18:27:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="9-1_四大组件的运行状态">9.1 四大组件的运行状态</h1><p>四大组件除了BroadcastReceiver，其他都必须在AndroidManifest中注册。<br>BroadcastReceiver可以在AndroidManifest静态注册，也可以动态注册。</p>
<p>Activity的主要作用是展示一个界面和用户交互。</p>
<p>Service是一种计算型组件，用于在后台执行一系列计算任务。Service有两种状态，启动状态和绑定状态。启动状态时，不需要和外界直接交互。绑定状态可以和外界通信。Service运行在主线程中。 </p>
<p>BroadcastReceiver静态注册在安装时被系统解析，动态注册通过Context.registerReceiver()。</p>
<p> ContentProvider是一种共享型组件，用于向其他组件乃至其他应用共享数据。</p>
<p> Activity<br> <img src="http://7xiw1r.com1.z0.glb.clouddn.com/20151002094304318.png" alt=""></p>
<p> ContentProvider<br> <img src="http://7xiw1r.com1.z0.glb.clouddn.com/20151002095010807.png" alt=""></p>
<p> <img src="http://7xiw1r.com1.z0.glb.clouddn.com/20151002094641495.png" alt=""></p>
<p> <img src="http://7xiw1r.com1.z0.glb.clouddn.com/20151002094725602.png" alt=""></p>
<p> <img src="http://7xiw1r.com1.z0.glb.clouddn.com/20151002094832822.png" alt=""></p>
<p> <img src="http://7xiw1r.com1.z0.glb.clouddn.com/20151002094847398.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="9-1_四大组件的运行状态">9.1 四大组件的运行状态</h1><p>四大组件除了BroadcastReceiver，其他都必须在AndroidManifest中注册。<br>BroadcastReceiver可以在AndroidManifest静态注册，也可以]]>
    </summary>
    
      <category term="读书笔记" scheme="http://seewhy.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发艺术探索读书笔记 第八章 理解Window和WindowManager]]></title>
    <link href="http://seewhy.me/2016/01/06/artsearchreadnote8/"/>
    <id>http://seewhy.me/2016/01/06/artsearchreadnote8/</id>
    <published>2016-01-06T11:56:37.000Z</published>
    <updated>2016-02-19T18:28:37.000Z</updated>
    <content type="html"><![CDATA[<p>Window是一个抽象类，具体实现是PhoneWindow。</p>
<h1 id="8-1_Window和WindowManager">8.1 Window和WindowManager</h1><p>FLAG_NOT_FOCUSABLE<br>表示Window不需要获取焦点，也不需要接收各种输入事件，此标记会同时开启FLAG_NOT_TOUCH_MODAL<br>FLAG_NOT_TOUCH_MODAL<br>开启后可以将当期WWindow区域以外的事件传递给底层Window。<br>FLAG_SHOW_WHEN_LOCKED<br>开启此模式可以让Window显示在锁屏上<br>Type参数表示Window的类型，有三种，应用Window,子Window和系统Window。</p>
<a id="more"></a>
<p>应用Window对应一个Activity，子Window不能单独存在，要依附于父Window。</p>
<p>系统Window需要声明权限才能创建，如Toast和系统状态栏。</p>
<p>应用Window层级是1~99，子Window层级1000~1999,系统Window2000~2999。</p>
<p>ViewManager接口提供了添加、更新和删除View的三个方法。WIndowManager接口继承了ViewManager。</p>
<h1 id="8-2_Window的内部机制">8.2 Window的内部机制</h1><h2 id="8-2-1_Window的添加过程">8.2.1 Window的添加过程</h2><p>WindowManagerImpl的addView实际上是调用WindowManagerGlobal的addView。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> final WindowManagerGlobal mGlobal = WindowManagerGlobal.getInstance();</span><br><span class="line"></span><br><span class="line">@<span class="function">Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span>(<span class="params">@NonNull View view, @NonNull ViewGroup.LayoutParams <span class="keyword">params</span></span>) </span>&#123;</span><br><span class="line">   applyDefaultToken(<span class="keyword">params</span>);</span><br><span class="line">   mGlobal.addView(view, <span class="keyword">params</span>, mDisplay, mParentWindow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而 mGlobal.addView创建了一个ViewRootImpl，然后通过ViewRootImpl的setView来更新界面。</p>
<p>setView内部通过requestLayout来完成异步刷新请求。最后通过WindowSession来完成最后的Window添加过程。添加是一次IPC调用。</p>
<p>Session内部通过WindowManagerService的addToDisplay方法实现Window的添加。</p>
<h2 id="8-2-2_Window的删除过程">8.2.2 Window的删除过程</h2><p>ViewRootImpl的die(boolean immediate)方法。</p>
<p>如果是异步的，将要删除的view放入mDyingViews中，然后发送一个MSG_DIE的消息。</p>
<p>同步的，就调用doDie方法，内部调用dispatchDetachedFromWindow();</p>
<p>主要工作是</p>
<p>1）垃圾回收，清楚数据和消息，移除回调。</p>
<p>2）通过Session的remove方法删除Window，同样是一个IPC过程，最终调用WMS的removeWindow。</p>
<p>3）调用View的dispatchDetachedFromWindow。</p>
<p>4）调用WindowManagerGlobal的doRemoveView方法刷新数据包。包括mRoots、mParams和mDyingViews，</p>
<p>需要将当期Window所关联的这三类对象从列表中删除。</p>
<h2 id="8-2-3_Window的更新过程">8.2.3 Window的更新过程</h2><p>首先更新view的LayoutParams，再更新viewRootImpl的LayoutParams，实现对View的重新测量，布局，重绘，最后通过WindowSession更新Window的视图，WindowManagerService.relayoutWindow()。</p>
<h1 id="8-3_Window的创建过程">8.3 Window的创建过程</h1><h2 id="8-3-1_Activity的Window创建过程">8.3.1 Activity的Window创建过程</h2><p>Activity的启动过程最终会由ActivityThread的performLaunchActivity()来完成，方法内部通过类加载器创建Activity的实例。并调用attac方法为其管理运行过程中需要的上下文环境变量。</p>
<p>attach方法里，系统会创建Activity的mWindow,并且有activity实现window的接口。</p>
<p>Activity的顶级view是DecorView，本质上是FrameLayout。</p>
<p>Activity的setContentView的大致步骤：</p>
<ol>
<li>如果没有DecorView，就创建一个。</li>
<li>将view添加到DecorView的mContentParent中。</li>
<li>回调Activity的onContentChanged方法同志Activity视图已经发生改变。</li>
</ol>
<p>经过上面3个步骤，DecorView创建完成并初始化，，但没有被WindowManager添加到Window中。<br>在ActivityThread的handleResumeActivity方法中，会调用Activity的onResume，接着调用makeVisible()，在这里真正完成DecorView的添加和显示。</p>
<h2 id="8-3-2_Dialog的Window创建过程">8.3.2 Dialog的Window创建过程</h2><p>与Activity的创建过程基本一致。<br>普通的Dialog创建必须要用Activity的Context，如果用application的Context，会报错。因为没有token。token一般只有Activity的Context才有。<br>可以通过设置为系统级别对话框来，就能使用application的Context。<br><code>dialog.getWindow.setType(WindowManager.LayoutParams.TYPE_SYSTEM_ERROR)</code><br>需要声明权限<br><code>&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;</code></p>
<h2 id="8-3-3_Toast的Window创建过程">8.3.3 Toast的Window创建过程</h2><p>Toast内部有两类IPC，一种是Tost访问NotificationManagerService，第二种是NMS回调TN接口。<br>Toast无法在没有Looper的线程中弹出，因为使用了handler将流程从binder线程池切换到当前线程。<br>非系统应用最多能同时存在50个ToastRecord，防止DOS。<br>NMS主要控制所有Toast显示的逻辑，但是具体显示工作任然交给调用者。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Window是一个抽象类，具体实现是PhoneWindow。</p>
<h1 id="8-1_Window和WindowManager">8.1 Window和WindowManager</h1><p>FLAG_NOT_FOCUSABLE<br>表示Window不需要获取焦点，也不需要接收各种输入事件，此标记会同时开启FLAG_NOT_TOUCH_MODAL<br>FLAG_NOT_TOUCH_MODAL<br>开启后可以将当期WWindow区域以外的事件传递给底层Window。<br>FLAG_SHOW_WHEN_LOCKED<br>开启此模式可以让Window显示在锁屏上<br>Type参数表示Window的类型，有三种，应用Window,子Window和系统Window。</p>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://seewhy.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发艺术探索读书笔记 第七章 Android动画深入分析]]></title>
    <link href="http://seewhy.me/2016/01/03/artsearchreadnote7/"/>
    <id>http://seewhy.me/2016/01/03/artsearchreadnote7/</id>
    <published>2016-01-03T11:56:37.000Z</published>
    <updated>2016-02-15T15:44:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="7-1_view动画">7.1 view动画</h1><p>View动画，有4种，平移、选择、缩放、透明度动画。</p>
<p>可以通过接口AnimationListener监听动画。</p>
<h2 id="7-1-2_自定义动画">7.1.2 自定义动画</h2><p>继承Animation抽象类，重写initalize和applyTransformation方法。</p>
<p>在applyTransformation进行矩阵变换，可以实现3D效果。</p>
<a id="more"></a>
<h2 id="7-1-3_帧动画">7.1.3 帧动画</h2><p>使用AnimationDrawable实现帧动画。</p>
<p>创建<animation-list>标签，</animation-list></p>
<p>然后</p>
<p>mButton.setBackGroundResource(R.drawable.frame_animation);</p>
<p>AnimationDrawable drawable = (AnimationDrawable)mButton.getBackGround();</p>
<p>drawable.start();</p>
<p>使用简单，但是容易OOM，尽量避免使用过多尺寸较大的图片。</p>
<h1 id="7-2_View动画的特殊使用场景">7.2 View动画的特殊使用场景</h1><h2 id="7-2-1_LayoutAnimation">7.2.1 LayoutAnimation</h2><p>可以为ViewGroup的子元素指定动画。</p>
<h2 id="7-2-2_Activity的切换效果">7.2.2 Activity的切换效果</h2><p>通过overridePendingTransition(int enterAnim, int exitAnim)方法。</p>
<p>必须在startActivity或finish方法之后被调用。</p>
<p>fragment可以通过</p>
<p>FragmentTransition的setCustomAnimations方法添加动画。</p>
<h1 id="7-3_属性动画">7.3 属性动画</h1><p>默认时间300ms，默认帧率10ms/帧。</p>
<p>从API 11之后才能使用，之前可以使用nineoldandroid来实现属性动画。</p>
<p>xml属性动画需要定义在res/animator下</p>
<p>ObjectAnimator继承自ValueAnimator,AnimatorSet是动画合集。</p>
<p><set>标签的ordering属性如果设为together，则所有动画同时开始播放。</set></p>
<p>如果是sequentially，则依次播放。默认为together。</p>
<p><animator>对应ValueAnimator</animator></p>
<p><objectanimator>对应ObjectAnimator</objectanimator></p>
<p><animator>比<objectanimator>少一个propertyName属性</objectanimator></animator></p>
<p>android:valueType表示propertyName的类型，有intType喝floatType两种，如果是颜色则不需要指定，系统自动处理。</p>
<p>android:repeatCount默认为0，-1表示无限循环。</p>
<p>使用方式：</p>
<p>Animator set = (Animator) AnimatorInflater.loadAnimatior(mContext, R.anim.animator);</p>
<p>set.setTarget(btn);</p>
<p>set.start();</p>
<h2 id="7-3-2_插值器和估值器">7.3.2 插值器和估值器</h2><p>系统预置的TimeInterpolator有：</p>
<p>LinearInterpolator线性插值器</p>
<p>AccelerateDecelerateInterpolator加速加速插值器</p>
<p>DecelerateInterpolator减速插值器</p>
<p>TypeEvaluator类型估值器</p>
<p>系统预置的有IntEvaluator、FloatEvaluator、ArgbEvaluator(针对颜色)</p>
<h2 id="7-3-3_属性动画的监听器">7.3.3 属性动画的监听器</h2><p>主要有2个接口：<br>AnimatorUpdateListener和AnimatorListener。<br>同时提供AnimatorListenerAdapter类，可以部分实现需要的方法。</p>
<h2 id="7-3-4_对任意属性做动画">7.3.4 对任意属性做动画</h2><p>对对象object的属性abc做动画，必须要满足：</p>
<ol>
<li>object必须提供setAbc方法。如果动画的时候没有传递初始值，还要提供getAbc方法，因为系统要去取abc属性的初始值，如果不满足，直接crash。</li>
<li>object的setAbc对属性abc所做的改变必须能够通过某种方式反映出来，比如改变UI，如果不满足，动画无效果。</li>
</ol>
<p>Button的setWidth方法实际是属于TextView的，不能用来设置宽度。<br>解决方法：</p>
<ol>
<li>如果有权限，给对象加上get、set方法。</li>
<li>用一个类包装原始对象，间接提高get、set方法。（wrapper模式）</li>
<li>shiy ValueAnimator，监听动画过程，自己实现属性改变。</li>
</ol>
<h2 id="7-3-5_属性动画的工作原理">7.3.5 属性动画的工作原理</h2><p>通过反射调用get和set方法。</p>
<h1 id="7-4">7.4</h1><p>使用动画的注意事项</p>
<ol>
<li>避免使用帧动画，当图片数量多并且较大时容易OOM。</li>
<li>内存泄露，无限循环的动画需要在activity退出时停止，否则会内存泄露。view动画不存在此问题。</li>
<li>3.0以下无法使用属性动画，可以使用nineoldandroid。</li>
<li>view动画是对view的影像做动画。如果view动画完成后无法隐藏，即setVisibility(View.GONE)失效，可以调用view.clearAnimation清除view动画解决。</li>
<li>动画过程中不要使用px而是使用dp，否则在不同dpi设备会有不同效果。</li>
<li>3.0之前,view动画或者属性动画平移后，都不能再新位置点击。3.0之后，属性动画点击位置为平移后，view动画在平移前。</li>
<li>建议开启硬件加速提供动画流畅性。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="7-1_view动画">7.1 view动画</h1><p>View动画，有4种，平移、选择、缩放、透明度动画。</p>
<p>可以通过接口AnimationListener监听动画。</p>
<h2 id="7-1-2_自定义动画">7.1.2 自定义动画</h2><p>继承Animation抽象类，重写initalize和applyTransformation方法。</p>
<p>在applyTransformation进行矩阵变换，可以实现3D效果。</p>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://seewhy.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Mac 10.11中编译Android 6.0源码]]></title>
    <link href="http://seewhy.me/2016/01/01/aospcompilation/"/>
    <id>http://seewhy.me/2016/01/01/aospcompilation/</id>
    <published>2016-01-01T14:09:01.000Z</published>
    <updated>2016-01-01T18:38:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>前几天心血来潮想编译Android源码，总共花了大概三天的时间，碰到一些问题，记录一下防止以后忘掉。</p>
<h1 id="本地环境">本地环境</h1><p>系统版本： OS X 10.11.2<br>git : 2.6.4<br>port :2.3.4<br>make : 3.81<br>curl : 7.46.0</p>
<h1 id="环境配置">环境配置</h1><p>首先需要一个区分大小写的硬盘,至少要100G，我是在一个移动硬盘上编译，所以直接磁盘工具-&gt;选择硬盘-&gt;抹掉,格式选择第二个”OS X扩展（区分大小写，日志式）”就可以了。</p>
<a id="more"></a>
<p>如果不想新建一个分区，也可以通过官网提供的方式，执行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdiutil <span class="operator"><span class="keyword">create</span> -<span class="keyword">type</span> <span class="keyword">SPARSE</span> -fs <span class="string">'Case-sensitive Journaled HFS+'</span> -<span class="keyword">size</span> <span class="number">100</span><span class="keyword">g</span> ~/android.dmg</span><br><span class="line">hdiutil attach ~/android.dmg -mountpoint /Volumes/android;</span></span><br></pre></td></tr></table></figure></p>
<p>来创建并挂载一个dmg文件来使用。</p>
<p>然后需要装一下java7环境，去下载一下就好了<a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u71-oth-JPR" target="_blank" rel="external">jdk-7u71-macosx-x64.dmg</a>，一般做Android开发的都已经装过了。</p>
<p>接下来需要安装macports，它会替你装好编译过程中需要的各种工具。<br>直接到<a href="http://www.macports.org/install.php" target="_blank" rel="external">官网</a>下载最新版本的，装好后，再将路径 <code>/opt/local/bin</code> 添加到环境变量，并且要在 <code>/usr/bin</code> 的前面。<br>接着执行<code>POSIXLY_CORRECT=1 sudo port install gmake libsdl git gnupg</code>开始下载。</p>
<p>然后执行 <code>make -v</code>查看当前make的版本，如果是3.82的话，还需要回退到3.81。因为3.82有个bug所以不能用来编译。不过我装完一直都是3.81，所以无所谓了，回退的具体方法可以去看官方文档。</p>
<h1 id="下载镜像">下载镜像</h1><p>我用的是清华的<a href="http://mirrors.tuna.tsinghua.edu.cn/help/#AOSP" target="_blank" rel="external">AOSP镜像</a>，根据提示</p>
<blockquote>
<p>由于首次同步需要下载 36GB 数据，过程中任何网络故障都可能造成同步失败，因此你可以选择使用每月更新的初始化包。</p>
</blockquote>
<p>所以我选择先下载这个初始包。然后再进行同步。<br>执行命令<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">wget</span> <span class="url">http://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar</span> <span class="comment"># 下载初始化包</span></span><br><span class="line">tar xf aosp-latest.tar</span><br><span class="line">cd AOSP   <span class="comment"># 解压得到的 AOSP 工程目录</span></span><br><span class="line">repo sync <span class="comment"># 正常同步</span></span><br></pre></td></tr></table></figure></p>
<p>如果提示repo命令没找到，可以通过命令 <code>brew install repo</code> 来直接安装。<br>如果没有brew,可以执行<code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code>来安装。<br>然后开始同步，同步过程中碰到一个错误<br>提示<code>result=56, HTTP code = 200</code> , 后来发现是git的一个bug，原本的git版本是2.4.9，将git升级到最新版2.6.4就解决了。</p>
<h1 id="编译">编译</h1><p>首先执行<code>source build/envsetup.sh</code>设置环境变量，然后使用lunch命令选择构建目标。<br>接着在AOSP目录下执行<code>make -j4</code>就可以开始编译了。<br>过程中碰到一堆错误。</p>
<ul>
<li><p>提示<code>build/core/config.mk:596: *** Error: could not find jdk tools.jar</code>，其实第一次make没有这个错误，但是中间手贱装了个java8，然后就找不到这个文件了。网上找了一些方法都不能解决，最后根据错误提示，在config.mk的596行附近看了下，发现它是调用了一个叫<code>find-jdk-tools-jar.sh</code>的脚本，然后又看了下这个脚本的代码，主要逻辑就是先寻找 <code>ANDROID_JAVA_HOME</code> 是否被定义，如果有，就返回<code>$ANDROID_JAVA_HOME/lib/tools.jar</code>，于是我自己定义了一下，<code>export ANDROID_JAVA_HOME=&quot;$(/usr/libexec/java_home -v 1.7)&quot;</code>，成功解决。</p>
</li>
<li><p>提示 <code>Unsupported curl, please use a curl not based on SecureTransport</code> ，搜了了下发现只有stackover上有人问了同样的问题，但没有人解答。刚开始以为是版本问题，于是换了一个最新版本的curl，但是没解决，不清楚这个不基于SecureTransport的curl是怎么样的。后来在元旦节这天，有人给出了<a href="http://stackoverflow.com/questions/33318756/while-i-make-the-source-of-android-6-0-it-failed" target="_blank" rel="external">解决方法</a>，原来是要用openssl重新编译一个curl。<br>首先下载<a href="http://curl.haxx.se/download.html" target="_blank" rel="external">curl源码</a>，然后执行</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/configure --prefix=/</span>usr<span class="regexp">/local/</span>curl --with-ssl=<span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>openssl/<span class="number">1.0</span><span class="number">.2</span>d_1</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这个1.0.2d_1需要根据自己本地实际版本进行更改，我这里是1.0.2e，最后将 <code>/usr/local/curl/bin</code> 添加到环境变量。可以使用 <code>curl --version</code>，查看一下，如果没有出现SecureTransport，而是出现OpenSSL，则表明替换成功。</p>
<ul>
<li>提示 <code>No Jack server running. Try &#39;jack-admin start-server&#39;</code><br>jack服务器开启失败。原因是之前手动创建了一个 .jack-server文件夹，删了之后重新make一下就可以了。</li>
</ul>
<p>make 完之后，就可以尝试刷进手机了。但是我并没有nexus手机，所以只能在模拟器上玩了。</p>
<h1 id="在Android_Studio上阅读源码">在Android Studio上阅读源码</h1><p>在AOSP根目录执行 <code>make idegen &amp;&amp; development/tools/idegen/idegen.sh</code>，然后直接用Android Studio打开生成的android.ipr 文件就可以了。</p>
<h1 id="参考">参考</h1><ul>
<li><p><a href="https://source.android.com/source/initializing.html" target="_blank" rel="external">AOSP官方说明</a></p>
</li>
<li><p><a href="http://mirrors.tuna.tsinghua.edu.cn/help/#AOSP" target="_blank" rel="external">Android 镜像使用帮助
</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>前几天心血来潮想编译Android源码，总共花了大概三天的时间，碰到一些问题，记录一下防止以后忘掉。</p>
<h1 id="本地环境">本地环境</h1><p>系统版本： OS X 10.11.2<br>git : 2.6.4<br>port :2.3.4<br>make : 3.81<br>curl : 7.46.0</p>
<h1 id="环境配置">环境配置</h1><p>首先需要一个区分大小写的硬盘,至少要100G，我是在一个移动硬盘上编译，所以直接磁盘工具-&gt;选择硬盘-&gt;抹掉,格式选择第二个”OS X扩展（区分大小写，日志式）”就可以了。</p>]]>
    
    </summary>
    
      <category term="AOSP" scheme="http://seewhy.me/tags/AOSP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发艺术探索读书笔记 第六章 Android的Drawable]]></title>
    <link href="http://seewhy.me/2015/12/27/artsearchreadnote6/"/>
    <id>http://seewhy.me/2015/12/27/artsearchreadnote6/</id>
    <published>2015-12-27T14:07:03.000Z</published>
    <updated>2015-12-27T14:10:42.000Z</updated>
    <content type="html"><![CDATA[<p>Drawable表示可以在Canvas上进行绘制的抽象的概念。</p>
<p>非图片类型Drawable占用空间小，可以减少apk大小。</p>
<p>BitmapDrawable表示一张图片，对应xml标签<bitmap></bitmap></p>
<p>NinePatchDrawable，表示一张.9图，<nine-patch>,在bitmap标签中也可以使用.9图。</nine-patch></p>
<p>ShapDrawable表示以颜色构造的图形，可以纯色，也可以渐变。<shape></shape></p>
<p>LayerDrawable表示层次化的drawable集合，下面的item会覆盖上面的item。<layer-list></layer-list></p>
<a id="more"></a>
<p>StateListDrawable对应<selector>,可以根据view的状态自动选择drawable。</selector></p>
<p>LevelListDrawable，对应<level-list>, item有maxLevel和minLevel属性，可以通过drawable的setLevel切换drawable。范围是0~10000。</level-list></p>
<p>TransitionDrawable，对应<transition>，用于实现两个Drawable之间的淡入淡出效果。</transition></p>
<p>如果我想在ImageView显示图片的时候有个渐变的动画效果，那么你可能会想到使用animation动画来实现，但这这种方式看起来不会自然，因为在调用statAnimation的时候因为图片已经显示了，这样再硬生生的播放一次动画其实会导致细微的闪烁效果。</p>
<p>使用TransitionDrawable可以完美解决这个问题。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">final TransitionDrawable td = <span class="keyword">new</span> TransitionDrawable(<span class="keyword">new</span> Drawable[] &#123; <span class="keyword">new</span> ColorDrawable(<span class="number">0xfffcfcfc</span>),</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> BitmapDrawable(mContext.getResources(), bitmap) &#125;);</span><br><span class="line"></span><br><span class="line">imageView.setImageDrawable(td);</span><br><span class="line"></span><br><span class="line">td.startTransition(<span class="number">300</span>);</span><br></pre></td></tr></table></figure>
<p>其中300是渐变持续的时间，TransitionDrawable的第一个参数是渐变开始时的图像，第二个参数是最终要显示的图像。</p>
<p>也可以将TransitionDrawable用xml表示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">transition</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/image_expand"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/image_collapse"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Resources res = getResources()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    TransitionDrawable transition = (TransitionDrawable)res.getDrawable(R.drawable.expand_collapse)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    ImageView image = (ImageView) findViewById(R.id.toggle_image)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    image.setImageDrawable(transition)<span class="comment">;        </span></span><br><span class="line"></span><br><span class="line">    transition.startTransition(1000)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>InsetDrawable对应<inset>,可以将其他drawable内嵌到自己当中。</inset></p>
<p>ScaleDrawable可以根据level将指定的drawable缩放到一定比例。<scale></scale></p>
<p>ClipDrawable可以根据自己当前level裁剪另一个drawable。<clip></clip></p>
<p>其他：</p>
<p>AnimationDrawable可以播放帧动画<animation-list>，ColorDrawable代表单色</animation-list></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Drawable表示可以在Canvas上进行绘制的抽象的概念。</p>
<p>非图片类型Drawable占用空间小，可以减少apk大小。</p>
<p>BitmapDrawable表示一张图片，对应xml标签<bitmap></p>
<p>NinePatchDrawable，表示一张.9图，<nine-patch>,在bitmap标签中也可以使用.9图。</p>
<p>ShapDrawable表示以颜色构造的图形，可以纯色，也可以渐变。<shape></p>
<p>LayerDrawable表示层次化的drawable集合，下面的item会覆盖上面的item。<layer-list></p>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://seewhy.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发艺术探索读书笔记 第五章 理解remoteViews]]></title>
    <link href="http://seewhy.me/2015/12/18/artsearchreadnote5/"/>
    <id>http://seewhy.me/2015/12/18/artsearchreadnote5/</id>
    <published>2015-12-18T13:35:53.000Z</published>
    <updated>2015-12-27T14:10:57.000Z</updated>
    <content type="html"><![CDATA[<h1 id="5-1-1">5.1.1</h1><p>RemoteViews用于自定义Notification。<br>PendingIntent表示待定Intent，包含的意图由用户触发。</p>
<h1 id="5-1-3">5.1.3</h1><p>PendingIntent支持三种待定意图：启动Activity，启动Service和发送广播。<br>getActivity(Context context,int requestCode, Intent intent, int flags)<br>如果两个PendingIntent内部的Intent相同并且requestCode也相同，那么这两个PendingIntent是相同的。</p>
<a id="more"></a>
<p>如果两个Intent的CompontName和inter-filter都相同，那么这两个Intent就是相同的。</p>
<p>Flags的类型：<br>    FLAG_ONE_SHOT：得到的pi只能使用一次，第二次使用该pi时报错<br>    FLAG_NO_CREATE： 当pi不存在时，不创建，返回null<br>    FLAG_CANCEL_CURRENT： 每次都创建一个新的pi<br>    FLAG_UPDATE_CURRENT： 不存在时就创建，创建好了以后就一直用它，每次使用时都会更新pi的数据(使用较多)  </p>
<p>如果notify方法的id是不改变，那么不管PendingIntent是否匹配，后面的通知都会直接替换前面的通知。<br>如果id改变，然后pi不匹配（requestCode与Intent相同称为匹配），那么这些通知之间不会相互干扰。</p>
<p>如果id改变并且pi匹配，根据pi的flag类型</p>
<h1 id="5-2">5.2</h1><p>RemoteViews构造函数：<br>public RemoteViews(String packageName,int layoutId)</p>
<p>RemoteView会通过Binder传递到SystemServer进程，因为RemoteViews实现了Parcelable接口，可以跨进程传输。<br>remoteViews内部记录提交的set方法，等到remoteviews被加载以后才执行。这样remoteview就可以在SystemServer进程中显示了。<br>每调用一次set操作，remoteviews中添加一个action。<br>当通过NotificationManager和AppWidgetManager来 提交更新时，这些Action会传到远程进程并执行。</p>
<p>setOnClickPendingIntent不能给ListView和StackView中的View设置单击事件，需要使用setPendingIntentTemplate和setOnClickFillInIntent组合。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="5-1-1">5.1.1</h1><p>RemoteViews用于自定义Notification。<br>PendingIntent表示待定Intent，包含的意图由用户触发。</p>
<h1 id="5-1-3">5.1.3</h1><p>PendingIntent支持三种待定意图：启动Activity，启动Service和发送广播。<br>getActivity(Context context,int requestCode, Intent intent, int flags)<br>如果两个PendingIntent内部的Intent相同并且requestCode也相同，那么这两个PendingIntent是相同的。</p>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://seewhy.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AndFix使用介绍]]></title>
    <link href="http://seewhy.me/2015/12/15/AndFixIntroduce/"/>
    <id>http://seewhy.me/2015/12/15/AndFixIntroduce/</id>
    <published>2015-12-14T16:41:51.000Z</published>
    <updated>2015-12-27T14:15:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p>AndFix，全称是<strong>And</strong>roid hot-<strong>fix</strong>。是阿里开源的一个Android热补丁框架，允许APP在不重新发布版本的情况下修复线上的bug。支持Android 2.3 到 6.0。</p>
<h1 id="使用方式">使用方式</h1><ol>
<li>首先添加依赖<br><code>compile &#39;com.alipay.euler:andfix:0.3.1@aar&#39;</code></li>
<li>然后在Application.onCreate() 中添加以下代码<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">patchManager = new PatchManager(context)<span class="comment">;</span></span><br><span class="line">patchManager.init(appversion)<span class="comment">;//current version</span></span><br><span class="line">patchManager.loadPatch()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>可以用这句话获取appversion<br><code>String appversion= getPackageManager().getPackageInfo(getPackageName(), 0).versionName;</code><br>注意每次appversion变更都会导致所有补丁被删除,如果appversion没有改变，则会加载已经保存的所有补丁。</p>
<a id="more"></a>
<ol>
<li><p>然后在需要的地方调用PatchManager的addPatch方法加载新补丁，比如可以在下载补丁文件之后调用。</p>
</li>
<li><p>之后就是打补丁的过程了，首先生成一个apk文件，然后更改代码，在修复bug后生成另一个apk。<br>通过官方提供的工具<a href="https://github.com/alibaba/AndFix/raw/master/tools/apkpatch-1.0.3.zip" target="_blank" rel="external">apkpatch</a><br>生成一个.apatch格式的补丁文件，需要提供原apk，修复后的apk，以及一个签名文件。<br>可以直接使用命令apkpatch查看具体的使用方法。<br>使用示例：<br><code>apkpatch -o D:/Patch/ -k debug.keystore -p android-a androiddebugkey -e android -f bug-fix.apk -t release.apk</code></p>
</li>
<li><p>通过网络传输或者adb push的方式将apatch文件传到手机上，然后运行到addPatch的时候就会加载补丁。<br>加载过的补丁会被保存到data/packagename/files/apatch_opt目录下，所以下载过来的补丁用过一次就可以删除了。</p>
</li>
</ol>
<h1 id="大致原理">大致原理</h1><p>apkpatch将两个apk做一次对比，然后找出不同的部分。可以看到生成的apatch了文件，后缀改成zip再解压开，里面有一个dex文件。通过jadx查看一下源码，里面就是被修复的代码所在的类文件,这些更改过的类都加上了一个_CF的后缀，并且变动的方法都被加上了一个叫@MethodReplace的annotation，通过clazz和method指定了需要替换的方法。<br>然后客户端sdk得到补丁文件后就会根据annotation来寻找需要替换的方法。最后由JNI层完成方法的替换。</p>
<h1 id="多次打补丁">多次打补丁</h1><p>如果本地保存了多个补丁，那么AndFix会按照补丁生成的时间顺序加载补丁。具体是根据.apatch文件中的PATCH.MF的字段Created-Time。</p>
<h1 id="安全性">安全性</h1><p>readme提示开发者需要验证下载过来的apatch文件的签名是否就是在使用apkpatch工具时使用的签名，如果不验证那么任何人都可以制作自己的apatch文件来对你的APP进行修改。<br>但是我看到AndFix已经做了验证，如果补丁文件的证书和当前apk的证书不是同一个的话，就不能加载补丁。<br>官网还有一条，提示需要验证optimize file的指纹，应该是为了防止有人替换掉本地保存的补丁文件，所以要验证MD5码，然而SecurityChecker类里面也已经做了这个工作。。但是这个MD5码是保存在sharedpreference里面，如果手机已经root那么还是可以被访问的。</p>
<h1 id="混淆">混淆</h1><p><code>-printmapping proguard.map</code><br>首先需要生成mapping文件记录混淆规则，之后可以把printmapping 这句话注释掉，每次只使用applymapping。<br><code>-applymapping proguard.map</code><br>然后在下面加上<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">*</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span></span><br><span class="line"></span>-keepclasseswithmembernames <span class="class"><span class="keyword">class</span> <span class="title">*</span> &#123;</span></span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">alipay</span>.<span class="title">euler</span>.<span class="title">andfix</span>.<span class="title">**</span> &#123;</span> *; &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="碰到的问题">碰到的问题</h1><p>刚开始做的demo中，每次产生的apatch文件用的名字都是相同的，结果导致只有第一次的补丁能生效。<br>看了源码后发现只有每次名字不同才能加载，log中应该也有提示，但是没注意到。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span> src = <span class="keyword">new</span> <span class="keyword">File</span>(path);</span><br><span class="line"><span class="keyword">File</span> dest = <span class="keyword">new</span> <span class="keyword">File</span>(mPatchDir, src.getName());</span><br><span class="line"><span class="keyword">if</span>(!src.exists())&#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dest.exists()) &#123;</span><br><span class="line">	Log.d(TAG, <span class="string">"patch ["</span> + path + <span class="string">"] has be loaded."</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="局限性">局限性</h1><ul>
<li>不支持YunOS</li>
<li>无法添加新类和新的字段</li>
<li>需要使用加固前的apk制作补丁，但是补丁文件很容易被反编译，也就是修改过的类源码容易泄露。</li>
<li>使用加固平台可能会使热补丁功能失效（看到有人在360加固提了这个问题，自己还未验证）。</li>
<li>经过测试，如果在5.0系统的ART模式下，无法对通过连续打补丁的方式对通过一个方法进行修改，而4.4 的dalvik模式则没有这个问题。</li>
<li>Android 4.4的ART模式中无法使用补丁功能</li>
</ul>
<h1 id="与Nuwa对比">与Nuwa对比</h1><p>Nuwa是另一个热补丁框架，原理是基于QQ空间团队提出的<a href="http://zhuanlan.zhihu.com/magilu/20308548" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a>。<br>与Nuwa相比，AndFix有一下优点：</p>
<ul>
<li>不需要重启APP即可应用补丁。</li>
<li>安全性更好，Nuwa后面的版本应该也会加上安全方面的内容。</li>
</ul>
<p>但是也有缺点</p>
<ul>
<li>无法添加类和字段</li>
</ul>
<h1 id="参考">参考</h1><p><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">官方readme文档</a><br><a href="http://blog.zhaiyifan.cn/2015/11/20/HotPatchCompare/" target="_blank" rel="external">各大热补丁方案分析和比较</a><br><a href="http://blog.csdn.net/qxs965266509/article/details/49816007" target="_blank" rel="external">Alibaba-AndFix Bug热修复框架原理及源码解析</a><br><a href="http://yunair.github.io/blog/2015/09/25/AndFix-%E8%A7%A3%E6%9E%90(%E4%B8%80" target="_blank" rel="external">AndFix解析</a>.html)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p>AndFix，全称是<strong>And</strong>roid hot-<strong>fix</strong>。是阿里开源的一个Android热补丁框架，允许APP在不重新发布版本的情况下修复线上的bug。支持Android 2.3 到 6.0。</p>
<h1 id="使用方式">使用方式</h1><ol>
<li>首先添加依赖<br><code>compile &#39;com.alipay.euler:andfix:0.3.1@aar&#39;</code></li>
<li>然后在Application.onCreate() 中添加以下代码<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">patchManager = new PatchManager(context)<span class="comment">;</span></span><br><span class="line">patchManager.init(appversion)<span class="comment">;//current version</span></span><br><span class="line">patchManager.loadPatch()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>可以用这句话获取appversion<br><code>String appversion= getPackageManager().getPackageInfo(getPackageName(), 0).versionName;</code><br>注意每次appversion变更都会导致所有补丁被删除,如果appversion没有改变，则会加载已经保存的所有补丁。</p>]]>
    
    </summary>
    
      <category term="热补丁" scheme="http://seewhy.me/tags/%E7%83%AD%E8%A1%A5%E4%B8%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发艺术探索读书笔记 第四章 view的工作原理]]></title>
    <link href="http://seewhy.me/2015/11/23/artsearchreadnote4/"/>
    <id>http://seewhy.me/2015/11/23/artsearchreadnote4/</id>
    <published>2015-11-23T12:56:08.000Z</published>
    <updated>2015-11-23T13:09:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="4-1">4.1</h1><p>ViewRoot对应于ViewRootImpl类，是连接WindowManager和DecorView的纽带。View的三大流程都是通过ViewRoot来完成的。在ActivityThread中,当activity被创建完毕，会将DecorView添加到Window中，同时<br>会创建ViewRootImpl对象，并将ViewRootImpl对象和DecorView关联。</p>
<p>View的绘制流程从ViewRoot的performTraversals开始，依次调用performMeasure、performLayout、performDraw。。</p>
<p>DecorView有一个子元素LinearLayout，里面是titleBar和content,这两个都是FrameLayout。</p>
<a id="more"></a>
<h1 id="4-2-1">4.2.1</h1><p>MeasureSpec是一个32位int值，高2为表示SpecMode，低30位代表SpecSize。<br>SpecMode的三种类型：</p>
<ol>
<li>UNSPECIFIED<br>父容器不对View有任何限制，要多大给多大，一般用于系统内部表示测量状态。</li>
<li>EXACTLY<br>父容器已经检测出View所需要的精确大小，view的大小就是SpecSize，对应于LayoutParams的match_parent和具体数值。</li>
<li>AT_MOST<br>view的大小不能超过父容器指定的SpecSize，对应于wrap_content。</li>
</ol>
<h1 id="4-2-2">4.2.2</h1><p>LayoutParams需要和父容器一起才能决定View的MeasureSpec。<br>DecorView的MeasureSpec是由窗口的尺寸和LayoutParams决定。<br>当view采用固定宽高时，不管父容器的MeasureSpec是什么，View的MeasureSpec都是精确模式并遵循Layoutparams中的大小。<br>当view采用wrap_content时，不管父容器的MeasureSpec是什么，View的MeasureSpec都是AT_MOST。<br>当view采用match_content时，当父容器是AT_MOST时，view也是AT_MOST。父容器是EXACTLY时，view也是EXACTLY。</p>
<p>UNSPECIFIED主要用于系统内部多次Measure的情况，一般不需要关注。</p>
<h1 id="4-3-1">4.3.1</h1><p>直接继承View的自定义控件需要重写onMeasure并设置wrap_content时的自身大小。否则就是父容器的剩余大小。<br>ViewGroup是一个抽象类，onMeasure由子类实现。</p>
<p>getSuggestedMinimumWidth的逻辑：View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的较大值。<br>一个比较好的习惯是在onLayout方法中去获取View的测量宽高或最终宽高。</p>
<p>获取view宽高的四种方法：</p>
<ol>
<li>Activity/View#onWindowFocusChanged<br>@Override<br>public void onWindowFocusChanged(boolean hasFocus) {<br> super.onWindowFocusChanged(hasFocus);<br> if (hasFocus) {<pre><code><span class="built_in">int</span> width = lv1.getMeasuredWidth<span class="literal">()</span>;
<span class="type">Log</span>.d(<span class="type">TAG</span>, <span class="string">"test"</span> +width + <span class="string">" "</span>+lv1.getMeasuredHeight<span class="literal">()</span> );
</code></pre> }<br>}</li>
<li>view.post(runnable)</li>
<li>ViewTreeObserver<br>当View树的状态发生改变或者内部view的可见性发生改变时，onGlobalLayout会被回调。</li>
<li>view.measure(int widthMeasureSpec, int heightMeasureSpec)<br>第四种方法，view的measure需要根据viewLayoutParams来使用，<br>如果是具体数值<br>int widthSpec = View.MeasureSpec.makeMeasureSpec(100, View.MeasureSpec.EXACTLY);<br>int heightSpec = View.MeasureSpec.makeMeasureSpec(100, View.MeasureSpec.EXACTLY);<br>lv1.measure(widthSpec, heightSpec);<br>如果是wrap_content<br>int widthSpec = View.MeasureSpec.makeMeasureSpec((1&lt;&lt;30)-1, View.MeasureSpec.AT_MOST);<br>int heightSpec = View.MeasureSpec.makeMeasureSpec((1&lt;&lt;30)-1, View.MeasureSpec.AT_MOST);<br>lv1.measure(widthSpec, heightSpec);<br>match_parent无法算出，因为无法知道父容器的大小。<h1 id="4-3-2">4.3.2</h1>View的默认实现中，getWidth()和getMeasuredWidth()相等，只是赋值时机不同。<br>getWidth()是 mRight-mLeft，在layout中形成，另一个在measure中形成。<h1 id="4-3-3">4.3.3</h1>View有一个方法setWillNotDraw,设置后可以不绘制任何内容。ViewGroup默认开启，如果要绘制ViewGroup，要先关闭。<h1 id="4-4-2">4.4.2</h1></li>
</ol>
<ul>
<li>如果继承view或ViewGroup，需要重写onMeasure支持wrap_content。</li>
<li>考虑支持padding</li>
<li>不要在view中使用Handler,有post方法。</li>
<li>View中如果有线程或动画，要及时停止。参考View#onDetachedFromWindow,对应的是onAttachedToWindow。</li>
</ul>
<p>margin是由父容器控制的。<br>重写onMeasure使wrap_content生效。</p>
<pre><code><span class="keyword">int</span> mSize = <span class="number">200</span>;
<span class="annotation">@Override</span>
<span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>{
    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);
    <span class="keyword">int</span> wMode = MeasureSpec.getMode(widthMeasureSpec);
    <span class="keyword">int</span> wSize = MeasureSpec.getSize(widthMeasureSpec);
    <span class="keyword">int</span> hMode = MeasureSpec.getMode(heightMeasureSpec);
    <span class="keyword">int</span> hSize = MeasureSpec.getSize(heightMeasureSpec);
    <span class="keyword">if</span> (wMode == MeasureSpec.AT_MOST &amp;&amp; hMode == MeasureSpec.AT_MOST) {
        setMeasuredDimension(mSize, mSize);
    } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(wMode == MeasureSpec.AT_MOST)</span> </span>{
        setMeasuredDimension(mSize, hSize);
    } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(hMode == MeasureSpec.AT_MOST)</span> </span>{
        setMeasuredDimension(wSize, mSize);
    }
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="4-1">4.1</h1><p>ViewRoot对应于ViewRootImpl类，是连接WindowManager和DecorView的纽带。View的三大流程都是通过ViewRoot来完成的。在ActivityThread中,当activity被创建完毕，会将DecorView添加到Window中，同时<br>会创建ViewRootImpl对象，并将ViewRootImpl对象和DecorView关联。</p>
<p>View的绘制流程从ViewRoot的performTraversals开始，依次调用performMeasure、performLayout、performDraw。。</p>
<p>DecorView有一个子元素LinearLayout，里面是titleBar和content,这两个都是FrameLayout。</p>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://seewhy.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发艺术探索读书笔记 第三章 view的事件体系]]></title>
    <link href="http://seewhy.me/2015/11/23/artsearchreadnote3/"/>
    <id>http://seewhy.me/2015/11/23/artsearchreadnote3/</id>
    <published>2015-11-23T12:56:02.000Z</published>
    <updated>2015-11-23T13:00:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="3-1-2_View的位置参数">3.1.2 View的位置参数</h1><p>x = left + translationX<br>y = top + translationY<br>在平移过程中,top和left表示原始左上角的位置信息，值不变。x,y,translationX和translationY改变。</p>
<ul>
<li>getX/getY返回相对于当前view左上角的坐标</li>
<li>getRawX/getRawY返回相对于屏幕左上角的坐标</li>
</ul>
<h1 id="3-1-3">3.1.3</h1><p>TouchSlop是系统所能识别出的最小滑动距离，通过ViewConfiguration.get(getContext()).getScaledTouchSlop()获得</p>
<a id="more"></a>
<h1 id="3-1-4">3.1.4</h1><p>VelocityTracker用于获取当前滑动速度</p>
<pre><code>VelocityTracker velocityTracker;
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>{
    mGestureDetector.onTouchEvent(event);
    <span class="keyword">int</span> action = event.getAction();
    <span class="keyword">if</span> (velocityTracker == <span class="keyword">null</span>) {
        velocityTracker = VelocityTracker.obtain();
    }
    velocityTracker.addMovement(event);
    <span class="keyword">switch</span> (action) {
        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:
            velocityTracker.computeCurrentVelocity(1000);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> MotionEvent.ACTION_UP:
            <span class="keyword">int</span> xVel = (<span class="keyword">int</span>)velocityTracker.getXVelocity();
            <span class="keyword">int</span> yVel = (<span class="keyword">int</span>)velocityTracker.getYVelocity();
            Log.i(TAG, xVel + <span class="string">" "</span> + yVel);
            velocityTracker.clear();
            velocityTracker.recycle();
            velocityTracker = <span class="keyword">null</span>;
            <span class="keyword">break</span>;
    }
    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;
}
</code></pre><p>public GestureDetector(OnGestureListener listener)已经是deprecated，需要用public GestureDetector(OnGestureListener listener, OnGestrureListener listener)代替<br>为了方便，可以直接使用下面的方式。SimpleOnGestureListener是实现OnGestrureListener 的内部静态类。<br>    mGestureDetector = new GestureDetector(this, new GestureDetector.SimpleOnGestureListener() {</p>
<pre><code>    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onSingleTapConfirmed</span><span class="params">(MotionEvent e)</span> </span>{
        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onSingleTapConfirmed</span><span class="params">(e)</span></span>;
    }
});
</code></pre><p>onSingleTapConfirmed严格的单击行为，后面不可能跟着另一个单击。<br>scrollTo(x, y)如果x ,y都为正数，则往左上角移动。只是内容移动，实际位置不变。<br>使用Scroller的方法:</p>
<pre><code>@<span class="type">Override</span>
public void computeScroll<span class="literal">()</span> {
    <span class="keyword">if</span> (scroller.computeScrollOffset<span class="literal">()</span>) {
        scrollTo(scroller.getCurrX<span class="literal">()</span>, scroller.getCurrY<span class="literal">()</span>);
        postInvalidate<span class="literal">()</span>;
    }
}
scroller.startScroll(scrollX, <span class="number">0</span>, delta, <span class="number">0</span>, <span class="number">1000</span>);
</code></pre><p>使用动画平移：<br>myView.animate().translationX(100).setDuration(1000).start();<br>布局参数平移：</p>
<pre><code>ViewGroup.MarginLayoutParams <span class="keyword">params</span> = (ViewGroup.MarginLayoutParams)myView.getLayoutParams();
<span class="keyword">params</span>.width += <span class="number">100</span>;
<span class="keyword">params</span>.leftMargin += <span class="number">100</span>;
myView.requestLayout();
进行拖动
@<span class="function">Override
<span class="keyword">public</span> boolean <span class="title">onTouchEvent</span><span class="params">(MotionEvent <span class="keyword">event</span>)</span> </span>{
    <span class="keyword">int</span> x = (<span class="keyword">int</span>) <span class="keyword">event</span>.getRawX();
    <span class="keyword">int</span> y = (<span class="keyword">int</span>) <span class="keyword">event</span>.getRawY();
    <span class="keyword">switch</span> (<span class="keyword">event</span>.getAction()) {
        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:
            <span class="keyword">int</span> dx = x - mLastX;
            <span class="keyword">int</span> dy = y - mLaxtY;
            animate().setDuration(<span class="number">0</span>).translationXBy(dx).translationYBy(dy).start();
    }
    mLastX = x;
    mLaxtY = y;
    <span class="keyword">return</span> <span class="keyword">true</span>;
}
</code></pre><p> 还可以通过handler的sendEmptyMessageDelayed实现滑动</p>
<h1 id="3-4_事件分发">3.4 事件分发</h1><pre><code>ViewGroup中dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent三者关系
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>{
    <span class="keyword">boolean</span> consume = <span class="keyword">false</span>;
    <span class="keyword">if</span> (onInterceptTouchEvent(ev)) {
        consume = onTouchEvent(ev);
    } <span class="keyword">else</span> {
        consume = child.dispatchTouchEvent(ev);
    }
    <span class="keyword">return</span> consume;
}
</code></pre><h2 id="事件机制小结">事件机制小结</h2><ul>
<li>如果OnTouchListener中onTouch返回True,则onTouchEvent不被调用。</li>
<li>OnClickListener优先级最低</li>
<li>一个事件序列指从down开始，经过&gt;=0个move,以up结束的一系列事件。</li>
<li>正常情况下，一个事件序列只能被一个View拦截且消耗。特殊情况下可以将自己处理的事件通过调用onTouchEvent强行传给其他view。</li>
<li>某个view一旦决定拦截，那么这个事件序列都只能由它处理。并且它的onInterceptTouchEvent不会再被调用。</li>
<li>某个view一旦决定处理事件，如果它不消耗ACTION_DOWN事件，那么同一事件序列的其他事件都不会在交给它处理，并且事件将重新交给它的父元素去处理，即父元素的onTouchEvent会被调用。</li>
<li>如果view不消耗除ACTION_DOWN以外的其他事件(只消耗ACTION_DOWN)，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前view可以持续收到后续的事件，最终这些消失的点击事件会传给Activity处理。</li>
<li>ViewGroup默认不拦截任何事件。</li>
<li>View没有onInterceptTouchEvent方法，一旦有事件传给它，它的onTouchEvent会被调用。</li>
<li><p>View的onTouchEvent默认返回true,除非他是不可点击的。</p>
<pre><code><span class="keyword">if</span> (((viewFlags <span class="subst">&amp;</span> CLICKABLE) <span class="subst">==</span> CLICKABLE <span class="subst">||</span>
        (viewFlags <span class="subst">&amp;</span> LONG_CLICKABLE) <span class="subst">==</span> LONG_CLICKABLE) <span class="subst">||</span>
        (viewFlags <span class="subst">&amp;</span> CONTEXT_CLICKABLE) <span class="subst">==</span> CONTEXT_CLICKABLE) {
  <span class="attribute">...</span>
  <span class="keyword">return</span> <span class="literal">true</span>;
}
</code></pre></li>
<li><p>view的enable不影响onTouchEvent的返回值。</p>
</li>
<li>onClick会发生的前提是view是可点击的，并且收到了down和up事件。</li>
<li>requestDisallowInterceptTouchEvent可以防止在父元素被拦截。除了ACTION_DOWN事件。因为ACTION_DOWN会重置状态。</li>
<li>点击activity时，由activity的dispatchTouchEvent开始事件分发，调用抽象类Window的superDispatchTouchEvent方法。Window的唯一实现在PhoneWindow中。<br>PhoneWindow将superDispatchTouchEvent传给DecorView。</li>
<li>setOnClickListener会自动将CLICKABLE设为true<h1 id="3-5-3解决滑动冲突的方式">3.5.3解决滑动冲突的方式</h1></li>
</ul>
<ol>
<li>外部拦截法<br>不拦截ACTION_DWON，因为一旦拦截，后序事件都会由父容器处理。<br>不拦截ACTION_UP，如果拦截，会导致子元素onClick无法触发。<br>然后根据需求判断是否拦截ACTION_MOVE。</li>
<li>内部拦截法<br>父容器不拦截任何事件。<br>子元素调用getParent().requestDisallowInterceptTouchEvent(true);来改变拦截规则</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="3-1-2_View的位置参数">3.1.2 View的位置参数</h1><p>x = left + translationX<br>y = top + translationY<br>在平移过程中,top和left表示原始左上角的位置信息，值不变。x,y,translationX和translationY改变。</p>
<ul>
<li>getX/getY返回相对于当前view左上角的坐标</li>
<li>getRawX/getRawY返回相对于屏幕左上角的坐标</li>
</ul>
<h1 id="3-1-3">3.1.3</h1><p>TouchSlop是系统所能识别出的最小滑动距离，通过ViewConfiguration.get(getContext()).getScaledTouchSlop()获得</p>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://seewhy.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Android开发艺术探索》读书笔记 第二章  IPC机制]]></title>
    <link href="http://seewhy.me/2015/11/17/artsearchreadnote2/"/>
    <id>http://seewhy.me/2015/11/17/artsearchreadnote2/</id>
    <published>2015-11-17T14:37:48.000Z</published>
    <updated>2015-11-17T14:57:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="2-2-1">2.2.1</h1><ul>
<li><p>使用多进程可以在AndroidManifest中通过设置android:process属性，或者在jni中fork一个进程<br>进程名 :remote :的含义是指在前面附加包名，并且属于私有进程。其他应用的组件不能和它在同一个进程。<br>不以:开头的进程可以通过SharedUID跑在同一个进程，但是要求两个应用签名相同。同一进程可以相互访问私有数据。</p>
</li>
<li><p>adb shell ps| grep xxx  获取包含字符串的进程</p>
</li>
</ul>
<h1 id="2-2-2">2.2.2</h1><p>多进程带来的问题</p>
<ol>
<li>静态成员和单例模式失效</li>
<li>线程同步机制失效</li>
<li>SharedPreference可靠性下降(sp不支持两个进程同时读写)</li>
<li>Application会创建多次</li>
</ol>
<p>跨进程通信的方式</p>
<ul>
<li>intent</li>
<li>共享文件和sharedPreference</li>
<li>基于Binder的Messenger和AIDL</li>
<li>Socket</li>
<li>ContentProvider</li>
</ul>
<a id="more"></a>
<h1 id="2-3-1_Serializable">2.3.1 Serializable</h1><p>实现Serializable接口的类最好指定 serialVersionUID<br>不指定编译器会根据类结构生成hash来设置，当类结构改变时，反序列化会失败。<br>指定后，如果增加或删减成员，反序列化不会失败，但是改变类名或改变成员类型，会失败。</p>
<h1 id="2-3-2">2.3.2</h1><ul>
<li><p>Parcelable通过writeToParcel实现序列化<br>通过CREATOR实现反序列化。</p>
</li>
<li><p>Serializable实现简单开销大，需要大量I/O操作<br>Parcelable推荐用于内存序列化，序列化到存储设备或网络传输，过程复杂，建议Serializable</p>
</li>
</ul>
<h1 id="2-3-3">2.3.3</h1><ul>
<li>客户端发起远程请求时线程被挂起，不能放在UI线程。</li>
<li><p>服务端的Binder方法运行在线程池中，应该用同步方法调用。</p>
</li>
<li><p>通过lindToDeath可以设置死亡代理，Binder死亡时会收到通知</p>
</li>
</ul>
<h1 id="2-4-2">2.4.2</h1><p>通过文件共享，读写文件使用ObjectInputStream和ObjectOutStream</p>
<h1 id="2-4-3">2.4.3</h1><ul>
<li><p>messenger可以跨进程传递消息</p>
</li>
<li><p>Messenger构造函数的参数可以是IBinder，也可以是Handle（实际上是调用Handle的getIMessenger方法）。</p>
</li>
<li><p>activity与另一个进程的service通过Messenger通信，首先创建ServiceConnection，在onServiceConnected中获取IBinder类型的service对象，根据service创建一个Messenger，调用send方法发送Message消息。如果需要获取返回消息，可以为Message对象设置replyTo,<br>replyTo也是一个构造函数为Handle的Messenger对象。<br>最后在onCreate调用bindService绑定Service。</p>
</li>
</ul>
<h1 id="2-4-4">2.4.4</h1><p>AIDL中支持的数据类型：</p>
<pre><code><span class="bullet">1. </span>基本数据类型
<span class="bullet">2. </span>String和CharSequence
<span class="bullet">3. </span>List：只支持ArrayList并且里面每个元素必须被AIDL支持
<span class="bullet">4. </span>Map:只支持HashMap，且里面每个元素被AIDL支持
<span class="bullet">5. </span>Parcelable
<span class="bullet">6. </span>AIDL:所以AIDL接口本身可以在AIDL文件中使用
</code></pre><ul>
<li><p>自定义Parcelable对象必须显示import进来</p>
</li>
<li><p>如果用到了自定义Parcelable对象，必须创建同名的AIDL文件，并在其中为他声明为Parcelable类型。</p>
</li>
<li><p>CopyOnWriteArrayList支持并发读写，类似的还有ConcurrentHashMap</p>
</li>
<li><p><a href="http://chenzehe.iteye.com/blog/1759884" target="_blank" rel="external">AtomicBoolean</a>的介绍</p>
</li>
<li><p>通过attach debuggger to android process 可以对其他进程断点调试</p>
</li>
<li><p>观察者模式，在客户端注册lintener后，不能直接通过unregisterListener取消。因为通过序列化传输listener，实际上已经是另一个对象。<br>因此需要使用RemoteCallbackList替代CopyOnWriteArrayList储存listenerList。<br>RemoteCallbackList内部有一个Map来存储listener,key是Binder对象。</p>
</li>
<li><p>RemoteCallbackList通过beginBroadCast获取数量，一定要跟finishBroadcast配对。</p>
</li>
<li><p>要注意Binder死亡，可以在服务端设置DeathRecipient监听，或者在客户端onServiceDisconnected监听。</p>
</li>
<li><p>DeathRecipient在binder线程池中回调, onServiceDisconnected在UI线程中回调。</p>
</li>
</ul>
<h2 id="AIDL权限验证">AIDL权限验证</h2><p>在manifest中声明需要的权限</p>
<pre><code>&lt;permission <span class="string">android:</span>name=<span class="string">"me.seewhy.lifecircle.permission.ACCESS_BOOK_SERVICE"</span> <span class="string">android:</span>protectionLevel=<span class="string">"normal"</span>/&gt;
</code></pre><p>然后在onBinder中验证</p>
<pre><code><span class="annotation">@Nullable</span>
<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function">IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>{
    <span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"me.seewhy.lifecircle.permission.ACCESS_BOOK_SERVICE"</span>);
    <span class="keyword">if</span> (check == PackageManager.PERMISSION_DENIED) {
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }
    <span class="keyword">return</span> mBinder;
}
</code></pre><p>也可以重写onTransact方法，如果返回false表示验证失败。<br>String[] packages = getPackageManager().getPackagesForUid(getCallingUid());<br>然后根据包名验证</p>
<h1 id="2-4-5">2.4.5</h1><p>onCreate、query、getType、insert、delete、update<br>ContentProvider的六个抽象方法除了onCreate在主线程，其他的都在Binder线程池中。</p>
<p>（待续）</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="2-2-1">2.2.1</h1><ul>
<li><p>使用多进程可以在AndroidManifest中通过设置android:process属性，或者在jni中fork一个进程<br>进程名 :remote :的含义是指在前面附加包名，并且属于私有进程。其他应用的组件不能和它在同一个进程。<br>不以:开头的进程可以通过SharedUID跑在同一个进程，但是要求两个应用签名相同。同一进程可以相互访问私有数据。</p>
</li>
<li><p>adb shell ps| grep xxx  获取包含字符串的进程</p>
</li>
</ul>
<h1 id="2-2-2">2.2.2</h1><p>多进程带来的问题</p>
<ol>
<li>静态成员和单例模式失效</li>
<li>线程同步机制失效</li>
<li>SharedPreference可靠性下降(sp不支持两个进程同时读写)</li>
<li>Application会创建多次</li>
</ol>
<p>跨进程通信的方式</p>
<ul>
<li>intent</li>
<li>共享文件和sharedPreference</li>
<li>基于Binder的Messenger和AIDL</li>
<li>Socket</li>
<li>ContentProvider</li>
</ul>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://seewhy.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Android开发艺术探索》读书笔记 第一章 生命周期与启动模式]]></title>
    <link href="http://seewhy.me/2015/11/17/artsearchreadnote1/"/>
    <id>http://seewhy.me/2015/11/17/artsearchreadnote1/</id>
    <published>2015-11-17T13:38:42.000Z</published>
    <updated>2015-11-17T14:59:05.000Z</updated>
    <content type="html"><![CDATA[<p>最近在读任主席的《Android开发艺术探索》，做一点笔记，防止以后忘掉。并不只是书上的内容，还有一些自己的补充。</p>
<h1 id="1-1-1_典型情况生命周期分析">1.1.1 典型情况生命周期分析</h1><ul>
<li><p>onStart、onResume与onPause、onStop有什么实质不同？<br>onStart、onStop是从是否可见来描述，onResume和onPause是从是否可与用户交互的角度。</p>
</li>
<li><p>在启动新activity时，先执行旧activity的onPause，然后再是新activiy的onCreate,onStart,onResume。</p>
</li>
<li><p>如果新的activity是透明的，那么原activity不会执行onStop。（没有变成不可见）</p>
</li>
<li><p>设置activity透明的方法</p>
<pre><code>&lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;<span class="constant">true</span>&lt;/<span class="property">item</span>&gt;
&lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:windowBackground"</span>&gt;@android:color/transparent&lt;/<span class="property">item</span>&gt;
</code></pre></li>
</ul>
<h1 id="1-1-2_异常情况生命周期">1.1.2 异常情况生命周期</h1><ul>
<li><p>系统在activity异常终止的时候会调用onSaveInstanceState存储数据，onRestoreInstanceState恢复数据。</p>
</li>
<li><p>按Home或启动新activity也会触发onSaveInstanceState。</p>
</li>
<li><p>内存不足时杀死进程会触发onSaveInstanceState、onRestoreInstanceState</p>
</li>
<li><p>转屏时触发onSaveInstanceState,如果要转屏时不触发，需要设置android:configChanges=”orientation”<br>如果是api&gt;=13,需设置android:configChanges=”orientation|screenSize”，<br>设置后转屏时回调 onConfigurationChanged</p>
</li>
</ul>
<a id="more"></a>
<h1 id="1-2-1_启动模式">1.2.1 启动模式</h1><ul>
<li><p>在singleTop与singleTask时，如果activity已存在，不会触发onStart与onResume，而是onNewIntent</p>
</li>
<li><p>TaskAffinity设置activity所需任务栈的名字,默认为包名<br>allowTaskReparenting为true运行activity从一个任务栈转移到另一个任务栈</p>
</li>
<li><p>有两种方法指导启动模式</p>
<ol>
<li>在AndroidMenifest中设置</li>
<li>在Intent中设置</li>
</ol>
</li>
</ul>
<p>第一种无法设定FLAG_ACTIVITY_CLEAR_TOP<br>第二种无法设置singleInstance</p>
<h1 id="1-2-2">1.2.2</h1><!-- activity的flags -->
<ul>
<li>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS<br>或者android:excludeFromRecents=”true”<br>可以在历史列表中不显示本应用</li>
</ul>
<h1 id="1-3_隐式匹配">1.3 隐式匹配</h1><ul>
<li><p>可以通过setAction和addCategory隐式启动组件</p>
</li>
<li><p>如果没有设置category，会默认使用android.intent.category.DEFAULT</p>
<pre><code><span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:mimeType</span>=<span class="value">"image/*"</span>/&gt;</span>
</code></pre></li>
<li><p>uri默认值为content和file</p>
</li>
<li><p>如果intentFilter中设置了data, 启动时必须要setDataAndType，可以用intent.setDataAndType(Uri.parse(“content://ic_launcher.png”), “image/png”); 匹配</p>
</li>
<li><p>隐式匹配前先用下面代码判断能否匹配到</p>
<pre><code>ResolveInfo resolveInfo = getPackageManager().resolveActivity(<span class="type">intent</span>, PackageManager.MATCH_DEFAULT_ONLY);
<span class="keyword">if</span> (resolveInfo <span class="comment">!= null) {</span>
    startActivity(<span class="type">intent</span>);
}
</code></pre></li>
<li><p>PackageManager.MATCH_DEFAULT_ONLY表示只匹配含有android.intent.category.DEFAULT的activity</p>
</li>
<li><p>public abstract List<resolveinfo> queryIntentActivities(Intent intent, int flags);<br>getPackageManager().queryIntentActivities() 返回所有满足规则的activity</resolveinfo></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在读任主席的《Android开发艺术探索》，做一点笔记，防止以后忘掉。并不只是书上的内容，还有一些自己的补充。</p>
<h1 id="1-1-1_典型情况生命周期分析">1.1.1 典型情况生命周期分析</h1><ul>
<li><p>onStart、onResume与onPause、onStop有什么实质不同？<br>onStart、onStop是从是否可见来描述，onResume和onPause是从是否可与用户交互的角度。</p>
</li>
<li><p>在启动新activity时，先执行旧activity的onPause，然后再是新activiy的onCreate,onStart,onResume。</p>
</li>
<li><p>如果新的activity是透明的，那么原activity不会执行onStop。（没有变成不可见）</p>
</li>
<li><p>设置activity透明的方法</p>
<pre><code>&lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;<span class="constant">true</span>&lt;/<span class="property">item</span>&gt;
&lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"android:windowBackground"</span>&gt;@android:color/transparent&lt;/<span class="property">item</span>&gt;
</code></pre></li>
</ul>
<h1 id="1-1-2_异常情况生命周期">1.1.2 异常情况生命周期</h1><ul>
<li><p>系统在activity异常终止的时候会调用onSaveInstanceState存储数据，onRestoreInstanceState恢复数据。</p>
</li>
<li><p>按Home或启动新activity也会触发onSaveInstanceState。</p>
</li>
<li><p>内存不足时杀死进程会触发onSaveInstanceState、onRestoreInstanceState</p>
</li>
<li><p>转屏时触发onSaveInstanceState,如果要转屏时不触发，需要设置android:configChanges=”orientation”<br>如果是api&gt;=13,需设置android:configChanges=”orientation|screenSize”，<br>设置后转屏时回调 onConfigurationChanged</p>
</li>
</ul>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://seewhy.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[stetho使用介绍]]></title>
    <link href="http://seewhy.me/2015/10/14/stethoIntroduce/"/>
    <id>http://seewhy.me/2015/10/14/stethoIntroduce/</id>
    <published>2015-10-14T12:07:44.000Z</published>
    <updated>2015-10-14T12:19:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p>stetho是facebook开发的Android调试工具。它可以通过chrome的开发者工具来辅助安卓开发。<br>总的来说，提供了一下几个功能：</p>
<ul>
<li>通过Elements标签查看界面的视图结构。</li>
<li>通过Network标签观察网络请求。</li>
<li>通过Resources标签查看本地数据，比如sqlite数据库，sharepreference等等。同时可以在这里执行sql语句。</li>
<li>通过Console标签，在这里执行js语句，可以在APP上弹出一个Toast。</li>
<li>dumpapp 是linux/mac上使用的命令行工具，可以修改app内部资源，暂时未详细了解。</li>
</ul>
<a id="more"></a>
<h2 id="准备">准备</h2><p>在使用之前需要先引用需要的包。<br>通过语句</p>
<pre><code><span class="keyword">compile</span> <span class="string">'com.facebook.stetho:stetho:1.2.0‘</span>
</code></pre><p>来引用stetho。</p>
<p>底层的网络请求可以通过两种方式来实现。分别是okhttp和urlconnection。我这里使用了okhttp进行网络请求。<br>引用方式：</p>
<pre><code><span class="keyword">compile</span> <span class="string">'com.facebook.stetho:stetho-okhttp:1.2.0'</span>
</code></pre><p>如果使用urlconnection,则需要添加</p>
<pre><code><span class="keyword">compile</span> <span class="string">'com.facebook.stetho:stetho-urlconnection:1.2.0'</span>
</code></pre><p>然后需要在使用自定义的Application添加 Stetho.initializeWithDefaults(this); </p>
<pre><code>public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Application</span> {</span> 
    public void onCreate() { 
    <span class="keyword">super</span>.onCreate(); 
    <span class="type">Stetho</span>.initializeWithDefaults(<span class="keyword">this</span>); 
    }
}
</code></pre><h2 id="观察视图结构">观察视图结构</h2><p>在chrome的地址栏输入chrome://inspect, 可以看到当前连接的设备，然后点击inspect按钮。<br>然后可以在Elements标签中观察视图结构，当选中某个view时，手机上对应的控件也会加上一层蓝色蒙版<br>，就像调试web页面一样。可以通过这个功能优化布局，防止view嵌套过深。或者再编写自定义控件的时候<br>也能提供帮助。</p>
<p><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemoelements_phone.png" alt=""></p>
<h2 id="观察网络请求">观察网络请求</h2><p>之前进行网络调试的时候，都是通过断点查看数据，或者通过设置代理，然后用Fiddler抓包来观察。<br>Stetho也提供了一种观察网络请求的方法。<br>首先要调用<br>mOkHttpClient.networkInterceptors().add(new StethoInterceptor());<br>来监听网络请求。然后开始调用接口。<br>这里我选择调用 <a href="http://www.tuling123.com/openapi/cloud/home.jsp" target="_blank" rel="external">图灵机器人</a> 的聊天接口来测试网络调用，数据传输用的是json格式。<br>请求示例： </p>
<pre><code><span class="string">http:</span><span class="comment">//www.tuling123.com/openapi/api?key=KEY&amp;info=你漂亮么</span>
</code></pre><p>返回结果：</p>
<pre><code>{

"<span class="attribute">code</span>":<span class="value"><span class="number">100000</span></span>,

"<span class="attribute">text</span>":<span class="value"><span class="string">"恩恩，害羞ing……"</span>

</span>}
</code></pre><p>具体的调用代码：</p>
<pre><code>mOkHttpClient = <span class="keyword">new</span> OkHttpClient();
mOkHttpClient.networkInterceptors().add(<span class="keyword">new</span> StethoInterceptor());


<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">(View view)</span> </span>{
    String msg = etSource.getText().toString();
    Request request = <span class="keyword">new</span> Request.Builder().url(API_URL + API_KEY + <span class="string">"&amp;info="</span> + msg).build();
    Call call = mOkHttpClient.newCall(request);
    call.enqueue(<span class="keyword">new</span> Callback() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, IOException e)</span> </span>{

        }

        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>{
            <span class="keyword">try</span> {
                <span class="keyword">final</span> JSONObject res = <span class="keyword">new</span> JSONObject(response.body().string());
                runOnUiThread(<span class="keyword">new</span> Runnable() {
                    <span class="annotation">@Override</span>
                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
                        <span class="keyword">try</span> {
                            textView.setText(res.getString(<span class="string">"text"</span>));
                        } <span class="keyword">catch</span> (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } <span class="keyword">catch</span> (JSONException e) {
                e.printStackTrace();
            }
        }
    });
}
</code></pre><p>发送请求之后，可以在Network标签看到所有通过okhttp发送的请求。但是如果APP中如果有不通过okhttp进行的请求，比如使用Glide加载图片，就无法监听这次加载图片的请求了。应该可以通过配置将okHttp作为Glide通信框架，然后监听。</p>
<p><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemotalk.png" alt=""></p>
<p>在这里还可以观察到数据的大小，加载时间。<br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemorequest.png" alt=""><br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemonetwork_detail1.png" alt=""><br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemonetwork_detail2.png" alt=""></p>
<h2 id="本地数据">本地数据</h2><p>以前想要观察手机上的sqlite数据库，都是通过命令行使用adb shell来操作，或者把数据库拷贝到电脑上然后再通过sqlite工具打开，非常不方便。现在可以直接通过stetho的Resources标签查看。</p>
<p>为了方便，我直接使用lite-orm来进行数据库操作。</p>
<pre><code>   <span class="annotation">@Table</span>(<span class="string">"person "</span>)
   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> {</span>
       <span class="annotation">@PrimaryKey</span>(AssignType.AUTO_INCREMENT)
       <span class="annotation">@Column</span>(<span class="string">"_id"</span>)
       <span class="keyword">public</span> <span class="typename">long</span> id;

       <span class="annotation">@Column</span>(<span class="string">"sex"</span>)
       <span class="keyword">public</span> String sex;

       <span class="annotation">@Column</span>(<span class="string">"age"</span>)
       <span class="keyword">public</span> <span class="typename">int</span> age;

       <span class="annotation">@Column</span>(<span class="string">"name"</span>)
       <span class="keyword">public</span> String name;
   }

<span class="keyword">public</span> <span class="typename">void</span> writeToDB(View view) {
           Person person = <span class="keyword">new</span> Person();
           person.age = <span class="number">1</span>;
           person.sex = <span class="string">"male"</span>;
           person.name = <span class="string">"233"</span>;
           liteOrm.save(person);
           textView.setText(String.format(<span class="string">"There are %d datas in db"</span>, liteOrm.queryCount(Person.<span class="keyword">class</span>)));
       }
</code></pre><p>上面的代码定义了一个person表格，然后每次执行writeToDB都会向表格中插入一条数据。<br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemosqlite.png" alt=""><br>另外，还可以在这里直接执行sql语句进行查询或者插入等操作。<br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemoselect2.png" alt=""></p>
<p>除了sqlite数据库，stetho还能观察本地sharedPreference数据<br>测试代码如下：</p>
<pre><code>    SharedPreferences sharedPreferences;
    SharedPreferences.Editor editor;
sharedPreferences = <span class="keyword">this</span>.getSharedPreferences(<span class="string">"sp"</span>, Activity.MODE_PRIVATE);
editor = sharedPreferences.edit();

<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">writeToSP</span><span class="params">(View view)</span> </span>{
        editor.putString(<span class="string">"test_key"</span>, <span class="string">"test_value"</span>);
        editor.apply();
        textView.setText(sharedPreferences.getString(<span class="string">"test_key"</span>, <span class="string">"null"</span>));
    }
</code></pre><p><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemosharedPreference.png" alt=""></p>
<h2 id="控制台调试">控制台调试</h2><p>如果想要开启js控制台的功能，还需要添加引用</p>
<pre><code><span class="keyword">compile</span> <span class="string">'com.facebook.stetho:stetho-js-rhino:1.2.0'</span>
</code></pre><p>然后Stetho的初始化要使用enableWebKitInspector</p>
<pre><code>Stetho.initialize(Stetho.newInitializerBuilder(context)
       .enableWebKitInspector(<span class="keyword">new</span> InspectorModulesProvider() {
         <span class="annotation">@Override</span>
         public <span class="built_in">Iterable</span>&lt;ChromeDevtoolsDomain&gt; <span class="literal">get</span>() {
           <span class="keyword">return</span> <span class="keyword">new</span> DefaultInspectorModulesBuilder(context).runtimeRepl(
               <span class="keyword">new</span> JsRuntimeReplFactoryBuilder(context)
                   <span class="comment">// Pass to JavaScript: var foo = "bar";</span>
                   .addVariable(<span class="string">"foo"</span>, <span class="string">"bar"</span>)
                   .build()
           ).finish();
         }
       })
       .build());
</code></pre><p>设置完成后，在console中输入</p>
<pre><code>importPackage(android.widget);
importPackage(android.os);
var <span class="operator"><span class="keyword">handler</span> = new <span class="keyword">Handler</span>(Looper.getMainLooper());</span>
<span class="operator"><span class="keyword">handler</span>.post(<span class="keyword">function</span>() { Toast.makeText(context, <span class="string">"Hello from JavaScript"</span>, Toast.LENGTH_LONG).<span class="keyword">show</span>() });</span>
</code></pre><p>可以看到app上弹出了一个toast。<br>这个是Stetho集成了开源项目Rhino，可以用js脚本动态执行java代码。<br>这个我能想到的使用场景就是在运行过程中直接查看内部数据，但是通过断点也能直接查看。<br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemoconsole.png" alt=""><br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemohellojs.png" alt=""><br>下面是rhino的简介</p>
<blockquote>
<p>Rhino 是一种使用 Java 语言编写的 JavaScript 的开源实现，原先由Mozilla开发，现在被集成进入JDK 6.0。与其他很多语言一样，Rhino 是一种动态类型的、基于对象的脚本语言，它可以简单地访问各种 Java 类库。Rhino 从 JavaScript 中借用了很多语法，让程序员可以快速编写功能强大的程序。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p>stetho是facebook开发的Android调试工具。它可以通过chrome的开发者工具来辅助安卓开发。<br>总的来说，提供了一下几个功能：</p>
<ul>
<li>通过Elements标签查看界面的视图结构。</li>
<li>通过Network标签观察网络请求。</li>
<li>通过Resources标签查看本地数据，比如sqlite数据库，sharepreference等等。同时可以在这里执行sql语句。</li>
<li>通过Console标签，在这里执行js语句，可以在APP上弹出一个Toast。</li>
<li>dumpapp 是linux/mac上使用的命令行工具，可以修改app内部资源，暂时未详细了解。</li>
</ul>]]>
    
    </summary>
    
      <category term="工具" scheme="http://seewhy.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用python完成重复任务]]></title>
    <link href="http://seewhy.me/2015/09/29/%E4%BD%BF%E7%94%A8python%E5%AE%8C%E6%88%90%E9%87%8D%E5%A4%8D%E4%BB%BB%E5%8A%A1/"/>
    <id>http://seewhy.me/2015/09/29/使用python完成重复任务/</id>
    <published>2015-09-29T15:33:10.000Z</published>
    <updated>2015-09-29T17:14:13.000Z</updated>
    <content type="html"><![CDATA[<p>事件背景:<br>接到一个任务，要我完成对很多文件改名字的操作。<br>任务原因是美工切过来的图片都是中文名，于是有人把xhdpi文件夹中的文件改成了英文名，<br>本来这也没什么问题，因为刚开始就说好只用xhdpi的内容，其他不需要放。<br>我问 “为什么会需要其他几个dpi的文件，Android不是会自动进行等比缩放的吗?”<br>答: “以后可能需要。”<br>好吧..</p>
<p>于是我又跟他说，android studio的重命名快捷键也可以对图片操作的，先把中文名的图片导入，<br>接着只要改了其中一个dpi的文件名,其他dpi也会自动改过来。<br>然而现在已经是一个dpi变了而其他的并没有变成英文的。最终这个重复劳动还是让我来做了，<br>以后新加的图片会考虑用我说的方法。</p>
<p>然后开始思考有没有方便的方法，一个个手动重命名实在太蠢了。<br>想到了两个方法:</p>
<ol>
<li>还是利用android studio的快捷键，找到中英文对应的图片，然后用快捷键把中文名改成英文名。</li>
<li>找到中英文的映射关系记录到一个字典里，然后用脚本实现批量重命名。</li>
</ol>
<a id="more"></a>
<p>最后还是决定用python来实现，可以复习一下python语法，顺便学一下文件操作。<br>以后碰到类似的任务，也可以同样的方法解决了。<br>因为xhdpi中的文件比其他文件夹中要多几个，而且xhdpi中也有些中文名，并没有改掉，多余代码<br>中也特殊处理了下。</p>
<p>当时想用图像识别的方法自动完成映射，看了篇图像识别的<a href="http://blog.csdn.net/gzlaiyonghao/article/details/2325027" target="_blank" rel="external">博客</a>，但是担心识别率不高而且时间不够，所以还是使用肉眼识别了。过几天再仔细研究下。</p>
<p>下面是具体的代码,其中name_map写了六十几条，这里省略了很多。<br>用到的文件操作基本都在<a href="http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html" target="_blank" rel="external">这里</a>，主要就是判断路径存在，创建文件夹以及移动文件了。</p>
<pre><code>import os
import shutil
<span class="built_in">source</span>_dir = <span class="string">'E:\\source\\'</span>
target_dir = <span class="string">'E:\\target\\'</span>
mdpi = <span class="string">'mipmap-mdpi'</span>
hdpi = <span class="string">'mipmap-hdpi'</span>
xhdpi = <span class="string">'mipmap-xhdpi'</span>
xxhdpi = <span class="string">'mipmap-xxhdpi'</span>
xxxhdpi = <span class="string">'mipmap-xxxhdpi'</span>
dpi_list = [mdpi, hdpi, xxhdpi, xxxhdpi]

name_map = {
<span class="string">'address_select_img'</span>:<span class="string">'地址-点击'</span>,<span class="string">'cart_select_img'</span>:<span class="string">'购物车-点击'</span>
}

<span class="built_in">source</span>_name = os.listdir(<span class="built_in">source</span>_dir + xhdpi)
<span class="built_in">print</span>(len(name_map.keys()))
<span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">source</span>_name:
    <span class="comment">#英文名</span>
    target_name = name.split(<span class="string">'.'</span>)[<span class="number">0</span>] 

    <span class="keyword">for</span> dpi <span class="keyword">in</span> dpi_list:
        dst_dir = target_dir + dpi
        <span class="keyword">if</span> False == os.path.exists(dst_dir):
                os.mkdir(dst_dir)

        <span class="keyword">if</span> name_map.keys().__contains__(target_name):

            src = <span class="built_in">source</span>_dir + dpi + <span class="string">'\\'</span> + name_map[target_name] + <span class="string">'.png'</span>

            <span class="keyword">if</span> os.path.exists(src):

                dst = dst_dir + <span class="string">'\\'</span> + target_name + <span class="string">'.png'</span>
                shutil.copyfile(src, dst)

            <span class="keyword">else</span>:
                <span class="built_in">print</span>(<span class="string">'file '</span> + src + <span class="string">' not exists'</span>)
        <span class="keyword">else</span>:
            <span class="keyword">if</span> os.path.exists(<span class="built_in">source</span>_dir + dpi + <span class="string">'\\'</span> + name):
                shutil.copyfile(<span class="built_in">source</span>_dir + dpi + <span class="string">'\\'</span> + name, dst_dir + <span class="string">'\\'</span> + name)
            <span class="keyword">else</span>:
                <span class="built_in">print</span>(<span class="string">'file '</span> + name + <span class="string">' also not exists'</span>)
</code></pre><p>想起了小时候看过的一篇文章<br><a href="http://www.myhack58.com/Article/60/76/2015/59238.htm" target="_blank" rel="external">如何成为一名黑客</a><br>我对下面这句话印象很深刻：</p>
<blockquote>
<p>黑客（以及所有创造力的人们）都不应该被愚蠢的重复性劳动所困扰。重复性劳动浪费了他们解决新问题的时间，而解决新问题正是黑客最大的价值所在。这种浪费会伤害到每一个人。无聊和乏味的工作不仅仅是令人不舒服而已，而且本身就是一种罪恶。</p>
<p>作为一个黑客，你必须坚信这点并尽可能多地将乏味的工作自动化，这不仅是为了你自己，也是为了其他人（尤其是其他黑客们）。</p>
</blockquote>
<p>这次事件感觉也算是对黑客精神一次小小的实践了吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>事件背景:<br>接到一个任务，要我完成对很多文件改名字的操作。<br>任务原因是美工切过来的图片都是中文名，于是有人把xhdpi文件夹中的文件改成了英文名，<br>本来这也没什么问题，因为刚开始就说好只用xhdpi的内容，其他不需要放。<br>我问 “为什么会需要其他几个dpi的文件，Android不是会自动进行等比缩放的吗?”<br>答: “以后可能需要。”<br>好吧..</p>
<p>于是我又跟他说，android studio的重命名快捷键也可以对图片操作的，先把中文名的图片导入，<br>接着只要改了其中一个dpi的文件名,其他dpi也会自动改过来。<br>然而现在已经是一个dpi变了而其他的并没有变成英文的。最终这个重复劳动还是让我来做了，<br>以后新加的图片会考虑用我说的方法。</p>
<p>然后开始思考有没有方便的方法，一个个手动重命名实在太蠢了。<br>想到了两个方法:</p>
<ol>
<li>还是利用android studio的快捷键，找到中英文对应的图片，然后用快捷键把中文名改成英文名。</li>
<li>找到中英文的映射关系记录到一个字典里，然后用脚本实现批量重命名。</li>
</ol>]]>
    
    </summary>
    
      <category term="python" scheme="http://seewhy.me/tags/python/"/>
    
      <category term="效率" scheme="http://seewhy.me/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[百世实习生面试总结]]></title>
    <link href="http://seewhy.me/2015/08/31/baishiinterview/"/>
    <id>http://seewhy.me/2015/08/31/baishiinterview/</id>
    <published>2015-08-31T11:15:46.000Z</published>
    <updated>2015-09-29T17:16:20.000Z</updated>
    <content type="html"><![CDATA[<p>总的来说感觉比较轻松，可能是因为这次只是实习生面试。<br>面试官看过我的博客，知道我面试过阿里，虽然没进，不知道是不是加分项。</p>
<p>问的问题：</p>
<h1 id="安卓方面">安卓方面</h1><ul>
<li><p>activity生命周期。<br>都说出来了。</p>
</li>
<li><p>activity的启动方式有哪些,singleTask与singleInstance的应用场景。<br>场景只说了singleInstance就 问下一个问题了，举了一个闹钟的例子，之前网上看的。<br><a href="http://xiazdong.me/2015/03/08/android-launchmode-application/" target="_blank" rel="external">http://xiazdong.me/2015/03/08/android-launchmode-application/</a></p>
</li>
<li><p>线程与进程的区别<br>大概说了一下，线程是最小的进程，一个进程内的线程共享资源，一个app就是一个进程等等，说的有点模糊。<br>​</p>
</li>
<li>universal image loader的运行流程，存储图片的方式、原理。<br>之前两次阿里面试都问到了类似的问题，于是看了它的源码。<br>这次基本上回答出来了吧。默认用的LruCache，然后原理也说了下。</li>
</ul>
<a id="more"></a>
<h1 id="网络方面">网络方面</h1><ul>
<li><p>网络的七层架构?<br>7 应用层 6 表示层 5 会话层 4 传输层 3 网络层 2 数据链路层 1 物理层<br>我说的时候会话层和物理层没有说出来。</p>
</li>
<li><p>tcp 与 udp的区别，在哪一层？<br>可靠与不可靠。接收端有无检测等等。<br>在传输层。</p>
</li>
<li><p>socket的作用，运行在哪一层？<br>不是很了解，只回答传输数据的</p>
</li>
<li><p>http与https的区别<br>只说了https更安全。。具体的也不知道</p>
</li>
</ul>
<h1 id="数据库方面">数据库方面</h1><ul>
<li><p>distinct的作用<br>去除一个表中某个字段重复的，用于返回唯一不同的值。。</p>
</li>
<li><p>我说用过orm，为什么要用orm?<br>因为好奇，而且方便，提供了编译检查，然后说了下编译检查的好处。</p>
</li>
<li><p>如果让我实现一个orm会用到哪些技术？<br>用反射获取一个类的各种属性来生成数据库的表和字段。<br>注解定义关键字方便orm的使用。</p>
</li>
</ul>
<h1 id="语法方面">语法方面</h1><ul>
<li><p>java的新特性<br>我回答了最希望看到的就是java 8中的lambda表达式。问了lambad的原理，不清楚。</p>
</li>
<li><p>我说写过c#，问我c#中的委托用过吗，是怎么样的？<br>不清楚怎么表达，结果就说感觉是代理模式的一种实现。然后就问了一下单例模式。<br>其实应该回答类似于c++的函数指针，通过间接的方式调用其他函数的。</p>
</li>
</ul>
<h1 id="算法方面">算法方面</h1><ul>
<li><p>有哪些排序算法，时间复杂度是多少？<br>冒泡，选择，快速排序，堆排序，桶排序等等。<br>冒泡选择是O(N^2),快排是O(n*logN)</p>
</li>
<li><p>冒泡与选择的区别？<br>代码肯定会写，但不知道怎么描述，大概说了一下选择是先找出最小的放到第一个，冒泡是左右两个比较。</p>
</li>
<li><p>存储图的方式有哪几个？<br>答：邻接矩阵与邻接表。</p>
</li>
<li><p>求最短路的方法？<br>答：迪杰斯特拉算法,spfa算法，但是具体过程回答的很模糊，没有准备。</p>
</li>
<li><p>有一块机械表，一天中时分秒重合的次数？<br>这个要在纸上写出具体代码，想了一下就是遍历一天中所有秒数，然后算出三个指针的角度进行比较。<br>写完后他问我有没有更好的办法，没有想出来。</p>
</li>
</ul>
<p>因为知道我做过ACM,然后问了模拟退火算法，神经网络，遗传算法，只是要求大概的讲讲<br>只知道和人工智能有关，基本说不上来= =。</p>
<p>面完过了一会儿hr就告诉我，说我基础不错，应该能进，然后过了4个小时offer就发过来了，还是挺开心的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>总的来说感觉比较轻松，可能是因为这次只是实习生面试。<br>面试官看过我的博客，知道我面试过阿里，虽然没进，不知道是不是加分项。</p>
<p>问的问题：</p>
<h1 id="安卓方面">安卓方面</h1><ul>
<li><p>activity生命周期。<br>都说出来了。</p>
</li>
<li><p>activity的启动方式有哪些,singleTask与singleInstance的应用场景。<br>场景只说了singleInstance就 问下一个问题了，举了一个闹钟的例子，之前网上看的。<br><a href="http://xiazdong.me/2015/03/08/android-launchmode-application/">http://xiazdong.me/2015/03/08/android-launchmode-application/</a></p>
</li>
<li><p>线程与进程的区别<br>大概说了一下，线程是最小的进程，一个进程内的线程共享资源，一个app就是一个进程等等，说的有点模糊。<br>​</p>
</li>
<li>universal image loader的运行流程，存储图片的方式、原理。<br>之前两次阿里面试都问到了类似的问题，于是看了它的源码。<br>这次基本上回答出来了吧。默认用的LruCache，然后原理也说了下。</li>
</ul>]]>
    
    </summary>
    
      <category term="面试" scheme="http://seewhy.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[象文面试总结]]></title>
    <link href="http://seewhy.me/2015/07/15/xiangweninterview/"/>
    <id>http://seewhy.me/2015/07/15/xiangweninterview/</id>
    <published>2015-07-15T12:13:40.000Z</published>
    <updated>2015-09-29T17:16:12.000Z</updated>
    <content type="html"><![CDATA[<p>昨天接到一个电话，说是在网上看到我的简历，问要不要去面试。<br>上一次面试是阿里的，结果惨败。于是想见识一些普通公司的面试，就答应了。<br>然后就定在今天下午。</p>
<p>提前一天下了他们公司的app，是做动态壁纸的，效果做的很酷炫。<br>这里应该能想到面试会问动画的问题，但是完全没有准备。结果今天问到动画就说不会。</p>
<p>下午两点多来到公司，然后填了一张表格就开始面试了。</p>
<p>一面比较随意，面试官感觉就比我大几岁。</p>
<p>下面是大致对话内容<br>“你的字写得好难看”</p>
<p>“嗯，是的”</p>
<a id="more"></a>
<p>“做的好多啊，c#，ios都做过。”</p>
<p>“但是都学得很水的。”</p>
<p>后来问了在github上有没有参与过什么开源项目。</p>
<p>感觉说没有不太好，我就回答了前几天看了一点eventBus的源码。收获很大，它用了观察者模式。</p>
<p>然后他说那个rxJava也是这样子的，也没问观察者模式的具体内容。</p>
<p>又问了做过的项目，我就把做过的酒店app拿出来说。</p>
<p>“有没有用过recyclerview</p>
<p>“有的”，我就把app上的横向category给他看，</p>
<p>“有没有哪个功能或者Bug是花了很长时间解决的”<br>这个以前阿里面的时候也问过，算是固定模式吧。<br>我说了一下实现播放器功能时和百度sdk冲突的事情。<br>然后又随意问了一些，整个过程比较轻松，主要是在问app上的功能怎么实现的。</p>
<p>后来换了一个人，大概是主管之类的。<br>气氛一下子变得很严肃= =</p>
<p>然后开始问：</p>
<ul>
<li><p>问了view的原理<br>我说view内部是先通过measure测量出每个元素的宽高，<br>然后用layout确定位置，最后draw出来。</p>
</li>
<li><p>问view中的类结构<br>我回答viewGroup继承自view,然后viewGroup下有各种layout。<br>答得也不是很完整。</p>
</li>
<li><p>问用过哪些eclipse的快捷键。<br>我有点无语，怎么还问快捷键的。<br>然后说我用android studio的。<br>“哦，那说一下as里常用的快捷键”<br>“我快捷键都自定义过了”<br>“嗯，那具体说一下”<br>“比如说cmd + E “最近文件 “双shift”快速搜索 “cmd+R”运行等等<br>“怎么快速搜索一个函数”<br>这个我忘记了，然后想到了vim的搜索，于是回答<br>“打一个/，然后搜函数名就可以了，我装了vim的插件”<br>“哦”</p>
</li>
<li><p>问adb用过没<br>我说用来安装卸载程序了</p>
</li>
<li><p>在系统低内存的时候，有个onLowMemory函数有没有实现过。<br>没有。应该是要在里面释放一下资源吧。</p>
</li>
<li><p>ActivityThread了解吗？<br>好像是用来启动activity的。</p>
</li>
<li><p>activity 启动模式了解吗？<br>这个我前几天看过，于是自信的开始讲<br>一共有4种模式standard ,singleTask,singleTop, singleInstance。<br>然后讲他们的区别和使用场景，讲一半的时候他来了个电话，接完就开始下一个问题。<br>我都还没说完，唉╮(╯_╰)╭</p>
</li>
<li><p>有没有做过按钮点击时状态变化？<br>回想了一下酒店app确实没有这样的按钮。<br>脑子有点蒙，就直接回答了 “没有”，<br>这个问题其实是知道答案的，在xml里面定义一个selector设置不同状态的图片。<br>然后他说了这样效果很不好，为什么不提出来，我就没说话了。</p>
</li>
<li><p>平时有看什么书？<br>我最近在看的一本是《Effective java》，还有一本《android的设计与实现》</p>
</li>
<li>有什么非技术类的书？<br>以前看过一本《黑客与画家》</li>
<li>问了我对加班有什么看法，（我刚开始听成java了(╯□╰)） 我说短期的加班可以接受，但是长期不行。</li>
</ul>
<p>后面又问了几个点都没答上来</p>
<ul>
<li>logcat中可以搜索关键字，那怎么搜索不包含关键字的内容。</li>
<li>机型适配,android的density(记不清了)</li>
<li>setContentview内部实现</li>
<li>动画</li>
<li>自定义控件的三个构造函数区别</li>
</ul>
<p>最后问了下我有没有什么想问他的（也是固定模式），<br>我问学习安卓，有什么好的经验或者学习方法。（这个问题我昨天也问阿里的面试官，回答是只能不断写代码）<br>他跟讲了很久，感觉是很认真的在回答吧。<br>主要内容是找到自己的兴趣，比如说动画，网络，然后把这方面钻研透。<br>又说要在高强度的项目中磨练自己，这样才能快速进步。</p>
<p>最后，他对我的评价是学的东西还都是浮在表面，没有深入了解进去。<br>然后又安慰我，刚才那些问题就算工作一两年的也不一定能答出来。</p>
<p>这次面试问的全都是安卓开发相关的，没有问一些算法、操作系统、设计模式之类的东西。<br>可能是大公司才喜欢问这些吧。</p>
<p>关于平时用到的一些控件，也确实很少关注底层实现。主要还是学习习惯的问题，想到过很多事情，但是很少去做，然后过一段时间就忘记了。虽然平时有做笔记，但是缺少定时的回顾。</p>
<p>总的来说，还是一次失败的面试。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天接到一个电话，说是在网上看到我的简历，问要不要去面试。<br>上一次面试是阿里的，结果惨败。于是想见识一些普通公司的面试，就答应了。<br>然后就定在今天下午。</p>
<p>提前一天下了他们公司的app，是做动态壁纸的，效果做的很酷炫。<br>这里应该能想到面试会问动画的问题，但是完全没有准备。结果今天问到动画就说不会。</p>
<p>下午两点多来到公司，然后填了一张表格就开始面试了。</p>
<p>一面比较随意，面试官感觉就比我大几岁。</p>
<p>下面是大致对话内容<br>“你的字写得好难看”</p>
<p>“嗯，是的”</p>]]>
    
    </summary>
    
      <category term="面试" scheme="http://seewhy.me/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android fragment]]></title>
    <link href="http://seewhy.me/2015/05/09/fragment%E8%A7%A3%E6%9E%90/"/>
    <id>http://seewhy.me/2015/05/09/fragment解析/</id>
    <published>2015-05-09T01:26:04.000Z</published>
    <updated>2015-09-29T17:16:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p>fragment是android 3.0（API 11） 中引入的。可以将fragment看成是activity中的一个模块，也有自己的生命周期，能够处理用户事件。</p>
<p>通过fragment可以方便的实现在多个activity中实现相同的布局。在做android平板开发时，可以和手机程序共用同一段代码。</p>
<p>如果需要在界面中动态添加、替换、删除某一块模块，也可以通过fragment实现。</p>
<a id="more"></a>
<h1 id="基本使用方式">基本使用方式</h1><h2 id="静态使用">静态使用</h2><p> 首先创建一个简单的布局文件fragment_simple.xml，当做fragment的布局，里面代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span> <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span> <span class="attribute">android:text</span>=<span class="value">"这是一个简单的fragment"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后新建文件SimpleFragment, 继承自Fragment，重写onCreateView方法</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function">View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">return</span> inflater.<span class="title">inflate</span><span class="params">(R.layout.fragment_simple, container, <span class="keyword">false</span>)</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>最后在需要使用的activity中加入，通过name属性指定具体使用哪一个fragment</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;fragment</span><br><span class="line">       android:<span class="property">id</span>=<span class="string">"@+id/fragment_static"</span></span><br><span class="line">       android:<span class="property">name</span>=<span class="string">"com.example.seewhy.androidfragmentdemo.SimpleFragment"</span></span><br><span class="line">       android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">       android:layout_height=<span class="string">"match_parent"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="动态使用">动态使用</h2><p>通过fragment可以使程序在运行过程中替换某一块界面，比如我想在点击一个button之后显示一块内容。<br>先要在布局文件中创建一个容器,定义id为container。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FrameLayout</span><br><span class="line">       android:<span class="property">id</span>=<span class="string">"@+id/container"</span></span><br><span class="line">       android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">       android:layout_height=<span class="string">"match_parent"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>然后在button的onClick中写如下面这段代码，实现将container替换为自己需要的fragment。<br>其中transaction就是事务的意思，在manager.beginTransaction与transaction.commit();之间的代码，要么全部执行成功，如果某一步执行失败，那么之前执行的也都会被撤销，保证事务的原子性。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager manager = getFragmentManager();</span><br><span class="line">FragmentTransaction <span class="keyword">transaction</span> = manager.beginTransaction();</span><br><span class="line"><span class="keyword">transaction</span>.replace(R.<span class="property">id</span>.container, new SimpleFragment());</span><br><span class="line"><span class="keyword">transaction</span>.commit();</span><br></pre></td></tr></table></figure>
<p>常用的FragmentTransaction操作有add、remove、hide、addToBackStack等等。</p>
<h1 id="使用v4包还是app包">使用v4包还是app包</h1><p>fragment同时存在于android.support.v4.app和android.app两个包中。其中v4包是为了使android 3.0之前的系统能够使用fragment而存在。选择的时候，如果能够确保使用环境在android 3.0以上，那么应该使用app包中的fragment。Android官方文档中的Fragment的例子也是以app包中的Fragment来讲解的。如果需要兼容低版本android,那么就使用v4，v4包最低能兼容到android 1.6。<br>    但是，项目中不能同时存在v4和app两个包中的fragment,只能选择其中一个使用。<br>以下是在v4包中使用fragment的注意事项</p>
<ol>
<li>如果使用了v4包的fragment，那么所在的Activity一定要继承FragmentActivity。</li>
<li>FragmentManager()需要换成getSupportFragmentManager()</li>
</ol>
<h1 id="生命周期">生命周期</h1><p>这个是从官网找来的fragment生命周期图,可以看到Fragment比Activity多了几个额外的生命周期回调方法：</p>
<ul>
<li><p>onAttach(Activity)-<br>当Fragment与Activity发生关联时调用。</p>
</li>
<li><p>onCreateView(LayoutInflater, ViewGroup,Bundle)<br>创建该Fragment的视图</p>
</li>
<li><p>onActivityCreated(Bundle)<br>当Activity的onCreate方法返回时调用</p>
</li>
<li><p>onDestoryView()<br>与onCreateView想对应，当该Fragment的视图被移除时调</p>
</li>
<li><p>onDetach()<br>与onAttach相对应，当Fragment与Activity关联被取消时调用<br>注意：除了onCreateView，其他的所有方法如果你重写了，必须调用父类对于该方法的实现，</p>
</li>
</ul>
<p><img src="http://7xiw1r.com1.z0.glb.clouddn.com/fragment_lifecycle.png" alt=""></p>
<h1 id="其他">其他</h1><p>以上介绍了fragment基本的使用方式。<br>官方还提供了ListFragment用于显示在listview,<br>FragmentPagerAdapter用于fragment与pagerAdapter结合使用。<br>如果需要在pageAdapter切换时保留fragment的数据，可以使用FragmentStatePagerAdapter。</p>
<blockquote>
<p>FragmentPagerAdapter：对于不再需要的fragment，选择调用detach方法，仅销毁视图，并不会销毁fragment实例。</p>
<p>FragmentStatePagerAdapter：会销毁不再需要的fragment，当当前事务提交以后，会彻底的将fragmeng从当前Activity的FragmentManager中移除，state标明，销毁时，会将其onSaveInstanceState(Bundle outState)中的bundle信息保存下来，当用户切换回来，可以通过该bundle恢复生成新的fragment，也就是说，你可以在onSaveInstanceState(Bundle outState)方法中保存一些数据，在onCreate中进行恢复创建。</p>
<p>如上所说，使用FragmentStatePagerAdapter当然更省内存，但是销毁新建也是需要时间的。一般情况下，如果你是制作主页面，就3、4个Tab，那么可以选择使用FragmentPagerAdapter，如果你是用于ViewPager展示数量特别多的条目时，那么建议使用FragmentStatePagerAdapter。</p>
</blockquote>
<p>还有最新的sdk已经把TabActivity标记为deprecated，如果要实现tabbar的效果，应该使用FragmentTabHost。</p>
<p>DialogFragment在android 3.0时被引入。是一种特殊的Fragment，用于在Activity的内容之上展示一个模态的对话框。典型的用于：展示警告框，输入框，确认框等等。<a href="http://blog.csdn.net/lmj623565791/article/details/37815413" target="_blank" rel="external">具体可以看这里</a></p>
<h1 id="参考资料">参考资料</h1><ul>
<li><a href="http://www.it165.net/pro/html/201411/26897.html" target="_blank" rel="external">Fragment用app包还是v4包解析</a> </li>
<li><a href="http://developer.android.com/guide/components/fragments.html" target="_blank" rel="external">官方fragment使用指南</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/37970961" target="_blank" rel="external">Android Fragment 真正的完全解析</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p>fragment是android 3.0（API 11） 中引入的。可以将fragment看成是activity中的一个模块，也有自己的生命周期，能够处理用户事件。</p>
<p>通过fragment可以方便的实现在多个activity中实现相同的布局。在做android平板开发时，可以和手机程序共用同一段代码。</p>
<p>如果需要在界面中动态添加、替换、删除某一块模块，也可以通过fragment实现。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://seewhy.me/tags/Android/"/>
    
      <category term="fragment" scheme="http://seewhy.me/tags/fragment/"/>
    
  </entry>
  
</feed>