<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[闲池阁]]></title>
  <subtitle><![CDATA[宠辱不惊，看庭前花开花落。去留无意，望天空云卷云舒。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://seewhy93.github.io/"/>
  <updated>2015-10-14T12:08:26.000Z</updated>
  <id>http://seewhy93.github.io/</id>
  
  <author>
    <name><![CDATA[seewhy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[stetho使用介绍]]></title>
    <link href="http://seewhy93.github.io/2015/10/14/stethoIntroduce/"/>
    <id>http://seewhy93.github.io/2015/10/14/stethoIntroduce/</id>
    <published>2015-10-14T12:07:44.000Z</published>
    <updated>2015-10-14T12:08:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p>stetho是facebook开发的Android调试工具。它可以通过chrome的开发者工具来辅助安卓开发。<br>总的来说，提供了一下几个功能：</p>
<ul>
<li>通过Elements标签查看界面的视图结构。</li>
<li>通过Network标签观察网络请求。</li>
<li>通过Resources标签查看本地数据，比如sqlite数据库，sharepreference等等。同时可以在这里执行sql语句。</li>
<li>通过Console标签，在这里执行js语句，可以在APP上弹出一个Toast。</li>
<li>dumpapp 是linux/mac上使用的命令行工具，可以修改app内部资源，暂时未详细了解。</li>
</ul>
<h2 id="准备">准备</h2><p>在使用之前需要先引用需要的包。<br>通过语句</p>
<pre><code><span class="string">"compile 'com.facebook.stetho:stetho:1.2.0 "</span>
</code></pre><p>来引用stetho。</p>
<p>底层的网络请求可以通过两种方式来实现。分别是okhttp和urlconnection。我这里使用了okhttp进行网络请求。<br>引用方式：</p>
<pre><code><span class="keyword">compile</span> <span class="string">'com.facebook.stetho:stetho-okhttp:1.2.0'</span>
</code></pre><p>如果使用urlconnection,则需要添加</p>
<pre><code><span class="keyword">compile</span> <span class="string">'com.facebook.stetho:stetho-urlconnection:1.2.0'</span>
</code></pre><p>然后需要在使用自定义的Application添加 Stetho.initializeWithDefaults(this); </p>
<pre><code>public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Application</span> {</span> 
    public void onCreate() { 
    <span class="keyword">super</span>.onCreate(); 
    <span class="type">Stetho</span>.initializeWithDefaults(<span class="keyword">this</span>); 
    }
}
</code></pre><h2 id="观察视图结构">观察视图结构</h2><p>在chrome的地址栏输入chrome://inspect, 可以看到当前连接的设备，然后点击inspect按钮。<br>然后可以在Elements标签中观察视图结构，当选中某个view时，手机上对应的控件也会加上一层蓝色蒙版<br>，就像调试web页面一样。可以通过这个功能优化布局，防止view嵌套过深。或者再编写自定义控件的时候<br>也能提供帮助。</p>
<p><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemoelements_phone.png" alt=""></p>
<h2 id="观察网络请求">观察网络请求</h2><p>之前进行网络调试的时候，都是通过断点查看数据，或者通过设置代理，然后用Fiddler抓包来观察。<br>Stetho也提供了一种观察网络请求的方法。<br>首先要调用<br>mOkHttpClient.networkInterceptors().add(new StethoInterceptor());<br>来监听网络请求。然后开始调用接口。<br>这里我选择调用 <a href="http://www.tuling123.com/openapi/cloud/home.jsp" target="_blank" rel="external">图灵机器人</a> 的聊天接口来测试网络调用，数据传输用的是json格式。<br>请求示例： </p>
<pre><code><span class="string">http:</span><span class="comment">//www.tuling123.com/openapi/api?key=KEY&amp;info=你漂亮么</span>
</code></pre><p>返回结果：</p>
<pre><code>{

"<span class="attribute">code</span>":<span class="value"><span class="number">100000</span></span>,

"<span class="attribute">text</span>":<span class="value"><span class="string">"恩恩，害羞ing……"</span>

</span>}
</code></pre><p>具体的调用代码：</p>
<pre><code>mOkHttpClient = <span class="keyword">new</span> OkHttpClient();
mOkHttpClient.networkInterceptors().add(<span class="keyword">new</span> StethoInterceptor());


<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">(View view)</span> </span>{
    String msg = etSource.getText().toString();
    Request request = <span class="keyword">new</span> Request.Builder().url(API_URL + API_KEY + <span class="string">"&amp;info="</span> + msg).build();
    Call call = mOkHttpClient.newCall(request);
    call.enqueue(<span class="keyword">new</span> Callback() {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, IOException e)</span> </span>{

        }

        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>{
            <span class="keyword">try</span> {
                <span class="keyword">final</span> JSONObject res = <span class="keyword">new</span> JSONObject(response.body().string());
                runOnUiThread(<span class="keyword">new</span> Runnable() {
                    <span class="annotation">@Override</span>
                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
                        <span class="keyword">try</span> {
                            textView.setText(res.getString(<span class="string">"text"</span>));
                        } <span class="keyword">catch</span> (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } <span class="keyword">catch</span> (JSONException e) {
                e.printStackTrace();
            }
        }
    });
}
</code></pre><p>发送请求之后，可以在Network标签看到所有通过okhttp发送的请求。但是如果APP中如果有不通过okhttp进行的请求，比如使用Glide加载图片，就无法监听这次加载图片的请求了。应该可以通过配置将okHttp作为Glide通信框架，然后监听。</p>
<p><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemotalk.png" alt=""></p>
<p>在这里还可以观察到数据的大小，加载时间。<br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemorequest.png" alt=""><br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemonetwork_detail1.png" alt=""><br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemonetwork_detail2.png" alt=""></p>
<h2 id="本地数据">本地数据</h2><p>以前想要观察手机上的sqlite数据库，都是通过命令行使用adb shell来操作，或者把数据库拷贝到电脑上然后再通过sqlite工具打开，非常不方便。现在可以直接通过stetho的Resources标签查看。</p>
<p>为了方便，我直接使用lite-orm来进行数据库操作。</p>
<pre><code>   <span class="annotation">@Table</span>(<span class="string">"person "</span>)
   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> {</span>
       <span class="annotation">@PrimaryKey</span>(AssignType.AUTO_INCREMENT)
       <span class="annotation">@Column</span>(<span class="string">"_id"</span>)
       <span class="keyword">public</span> <span class="typename">long</span> id;

       <span class="annotation">@Column</span>(<span class="string">"sex"</span>)
       <span class="keyword">public</span> String sex;

       <span class="annotation">@Column</span>(<span class="string">"age"</span>)
       <span class="keyword">public</span> <span class="typename">int</span> age;

       <span class="annotation">@Column</span>(<span class="string">"name"</span>)
       <span class="keyword">public</span> String name;
   }

<span class="keyword">public</span> <span class="typename">void</span> writeToDB(View view) {
           Person person = <span class="keyword">new</span> Person();
           person.age = <span class="number">1</span>;
           person.sex = <span class="string">"male"</span>;
           person.name = <span class="string">"233"</span>;
           liteOrm.save(person);
           textView.setText(String.format(<span class="string">"There are %d datas in db"</span>, liteOrm.queryCount(Person.<span class="keyword">class</span>)));
       }
</code></pre><p>上面的代码定义了一个person表格，然后每次执行writeToDB都会向表格中插入一条数据。<br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemosqlite.png" alt=""><br>另外，还可以在这里直接执行sql语句进行查询或者插入等操作。<br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemoselect2.png" alt=""></p>
<p>除了sqlite数据库，stetho还能观察本地sharedPreference数据<br>测试代码如下：</p>
<pre><code>    SharedPreferences sharedPreferences;
    SharedPreferences.Editor editor;
sharedPreferences = <span class="keyword">this</span>.getSharedPreferences(<span class="string">"sp"</span>, Activity.MODE_PRIVATE);
editor = sharedPreferences.edit();

<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">writeToSP</span><span class="params">(View view)</span> </span>{
        editor.putString(<span class="string">"test_key"</span>, <span class="string">"test_value"</span>);
        editor.apply();
        textView.setText(sharedPreferences.getString(<span class="string">"test_key"</span>, <span class="string">"null"</span>));
    }
</code></pre><p><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemosharedPreference.png" alt=""></p>
<h2 id="控制台调试">控制台调试</h2><p>如果想要开启js控制台的功能，还需要添加引用</p>
<pre><code><span class="keyword">compile</span> <span class="string">'com.facebook.stetho:stetho-js-rhino:1.2.0'</span>
</code></pre><p>然后Stetho的初始化要使用enableWebKitInspector</p>
<pre><code>Stetho.initialize(Stetho.newInitializerBuilder(context)
       .enableWebKitInspector(<span class="keyword">new</span> InspectorModulesProvider() {
         <span class="annotation">@Override</span>
         public <span class="built_in">Iterable</span>&lt;ChromeDevtoolsDomain&gt; <span class="literal">get</span>() {
           <span class="keyword">return</span> <span class="keyword">new</span> DefaultInspectorModulesBuilder(context).runtimeRepl(
               <span class="keyword">new</span> JsRuntimeReplFactoryBuilder(context)
                   <span class="comment">// Pass to JavaScript: var foo = "bar";</span>
                   .addVariable(<span class="string">"foo"</span>, <span class="string">"bar"</span>)
                   .build()
           ).finish();
         }
       })
       .build());
</code></pre><p>设置完成后，在console中输入</p>
<pre><code>importPackage(android.widget);
importPackage(android.os);
var <span class="operator"><span class="keyword">handler</span> = new <span class="keyword">Handler</span>(Looper.getMainLooper());</span>
<span class="operator"><span class="keyword">handler</span>.post(<span class="keyword">function</span>() { Toast.makeText(context, <span class="string">"Hello from JavaScript"</span>, Toast.LENGTH_LONG).<span class="keyword">show</span>() });</span>
</code></pre><p>可以看到app上弹出了一个toast。<br>这个是Stetho集成了开源项目Rhino，可以用js脚本动态执行java代码。<br>这个我能想到的使用场景就是在运行过程中直接查看内部数据，但是通过断点也能直接查看。<br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemoconsole.png" alt=""><br><img src="http://7xiw1r.com1.z0.glb.clouddn.com/stethodemohellojs.png" alt=""><br>下面是rhino的简介</p>
<blockquote>
<p>Rhino 是一种使用 Java 语言编写的 JavaScript 的开源实现，原先由Mozilla开发，现在被集成进入JDK 6.0。与其他很多语言一样，Rhino 是一种动态类型的、基于对象的脚本语言，它可以简单地访问各种 Java 类库。Rhino 从 JavaScript 中借用了很多语法，让程序员可以快速编写功能强大的程序。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p>stetho是facebook开发的Android调试工具。它可以通过chrome的开发者工具来辅助安卓开发。<br>总的来说，提供了一下几个功能：</p>
<ul>
<li>通过Elements标签查看界面的视图结构。</li>
<l]]>
    </summary>
    
      <category term="工具" scheme="http://seewhy93.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用python完成重复任务]]></title>
    <link href="http://seewhy93.github.io/2015/09/29/%E4%BD%BF%E7%94%A8python%E5%AE%8C%E6%88%90%E9%87%8D%E5%A4%8D%E4%BB%BB%E5%8A%A1/"/>
    <id>http://seewhy93.github.io/2015/09/29/使用python完成重复任务/</id>
    <published>2015-09-29T15:33:10.000Z</published>
    <updated>2015-09-29T17:14:13.000Z</updated>
    <content type="html"><![CDATA[<p>事件背景:<br>接到一个任务，要我完成对很多文件改名字的操作。<br>任务原因是美工切过来的图片都是中文名，于是有人把xhdpi文件夹中的文件改成了英文名，<br>本来这也没什么问题，因为刚开始就说好只用xhdpi的内容，其他不需要放。<br>我问 “为什么会需要其他几个dpi的文件，Android不是会自动进行等比缩放的吗?”<br>答: “以后可能需要。”<br>好吧..</p>
<p>于是我又跟他说，android studio的重命名快捷键也可以对图片操作的，先把中文名的图片导入，<br>接着只要改了其中一个dpi的文件名,其他dpi也会自动改过来。<br>然而现在已经是一个dpi变了而其他的并没有变成英文的。最终这个重复劳动还是让我来做了，<br>以后新加的图片会考虑用我说的方法。</p>
<p>然后开始思考有没有方便的方法，一个个手动重命名实在太蠢了。<br>想到了两个方法:</p>
<ol>
<li>还是利用android studio的快捷键，找到中英文对应的图片，然后用快捷键把中文名改成英文名。</li>
<li>找到中英文的映射关系记录到一个字典里，然后用脚本实现批量重命名。</li>
</ol>
<a id="more"></a>
<p>最后还是决定用python来实现，可以复习一下python语法，顺便学一下文件操作。<br>以后碰到类似的任务，也可以同样的方法解决了。<br>因为xhdpi中的文件比其他文件夹中要多几个，而且xhdpi中也有些中文名，并没有改掉，多余代码<br>中也特殊处理了下。</p>
<p>当时想用图像识别的方法自动完成映射，看了篇图像识别的<a href="http://blog.csdn.net/gzlaiyonghao/article/details/2325027" target="_blank" rel="external">博客</a>，但是担心识别率不高而且时间不够，所以还是使用肉眼识别了。过几天再仔细研究下。</p>
<p>下面是具体的代码,其中name_map写了六十几条，这里省略了很多。<br>用到的文件操作基本都在<a href="http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html" target="_blank" rel="external">这里</a>，主要就是判断路径存在，创建文件夹以及移动文件了。</p>
<pre><code>import os
import shutil
<span class="built_in">source</span>_dir = <span class="string">'E:\\source\\'</span>
target_dir = <span class="string">'E:\\target\\'</span>
mdpi = <span class="string">'mipmap-mdpi'</span>
hdpi = <span class="string">'mipmap-hdpi'</span>
xhdpi = <span class="string">'mipmap-xhdpi'</span>
xxhdpi = <span class="string">'mipmap-xxhdpi'</span>
xxxhdpi = <span class="string">'mipmap-xxxhdpi'</span>
dpi_list = [mdpi, hdpi, xxhdpi, xxxhdpi]

name_map = {
<span class="string">'address_select_img'</span>:<span class="string">'地址-点击'</span>,<span class="string">'cart_select_img'</span>:<span class="string">'购物车-点击'</span>
}

<span class="built_in">source</span>_name = os.listdir(<span class="built_in">source</span>_dir + xhdpi)
<span class="built_in">print</span>(len(name_map.keys()))
<span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">source</span>_name:
    <span class="comment">#英文名</span>
    target_name = name.split(<span class="string">'.'</span>)[<span class="number">0</span>] 

    <span class="keyword">for</span> dpi <span class="keyword">in</span> dpi_list:
        dst_dir = target_dir + dpi
        <span class="keyword">if</span> False == os.path.exists(dst_dir):
                os.mkdir(dst_dir)

        <span class="keyword">if</span> name_map.keys().__contains__(target_name):

            src = <span class="built_in">source</span>_dir + dpi + <span class="string">'\\'</span> + name_map[target_name] + <span class="string">'.png'</span>

            <span class="keyword">if</span> os.path.exists(src):

                dst = dst_dir + <span class="string">'\\'</span> + target_name + <span class="string">'.png'</span>
                shutil.copyfile(src, dst)

            <span class="keyword">else</span>:
                <span class="built_in">print</span>(<span class="string">'file '</span> + src + <span class="string">' not exists'</span>)
        <span class="keyword">else</span>:
            <span class="keyword">if</span> os.path.exists(<span class="built_in">source</span>_dir + dpi + <span class="string">'\\'</span> + name):
                shutil.copyfile(<span class="built_in">source</span>_dir + dpi + <span class="string">'\\'</span> + name, dst_dir + <span class="string">'\\'</span> + name)
            <span class="keyword">else</span>:
                <span class="built_in">print</span>(<span class="string">'file '</span> + name + <span class="string">' also not exists'</span>)
</code></pre><p>想起了小时候看过的一篇文章<br><a href="http://www.myhack58.com/Article/60/76/2015/59238.htm" target="_blank" rel="external">如何成为一名黑客</a><br>我对下面这句话印象很深刻：</p>
<blockquote>
<p>黑客（以及所有创造力的人们）都不应该被愚蠢的重复性劳动所困扰。重复性劳动浪费了他们解决新问题的时间，而解决新问题正是黑客最大的价值所在。这种浪费会伤害到每一个人。无聊和乏味的工作不仅仅是令人不舒服而已，而且本身就是一种罪恶。</p>
<p>作为一个黑客，你必须坚信这点并尽可能多地将乏味的工作自动化，这不仅是为了你自己，也是为了其他人（尤其是其他黑客们）。</p>
</blockquote>
<p>这次事件感觉也算是对黑客精神一次小小的实践了吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>事件背景:<br>接到一个任务，要我完成对很多文件改名字的操作。<br>任务原因是美工切过来的图片都是中文名，于是有人把xhdpi文件夹中的文件改成了英文名，<br>本来这也没什么问题，因为刚开始就说好只用xhdpi的内容，其他不需要放。<br>我问 “为什么会需要其他几个dpi的文件，Android不是会自动进行等比缩放的吗?”<br>答: “以后可能需要。”<br>好吧..</p>
<p>于是我又跟他说，android studio的重命名快捷键也可以对图片操作的，先把中文名的图片导入，<br>接着只要改了其中一个dpi的文件名,其他dpi也会自动改过来。<br>然而现在已经是一个dpi变了而其他的并没有变成英文的。最终这个重复劳动还是让我来做了，<br>以后新加的图片会考虑用我说的方法。</p>
<p>然后开始思考有没有方便的方法，一个个手动重命名实在太蠢了。<br>想到了两个方法:</p>
<ol>
<li>还是利用android studio的快捷键，找到中英文对应的图片，然后用快捷键把中文名改成英文名。</li>
<li>找到中英文的映射关系记录到一个字典里，然后用脚本实现批量重命名。</li>
</ol>]]>
    
    </summary>
    
      <category term="python" scheme="http://seewhy93.github.io/tags/python/"/>
    
      <category term="效率" scheme="http://seewhy93.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[百世实习生面试总结]]></title>
    <link href="http://seewhy93.github.io/2015/08/31/baishiinterview/"/>
    <id>http://seewhy93.github.io/2015/08/31/baishiinterview/</id>
    <published>2015-08-31T11:15:46.000Z</published>
    <updated>2015-09-29T17:16:20.000Z</updated>
    <content type="html"><![CDATA[<p>总的来说感觉比较轻松，可能是因为这次只是实习生面试。<br>面试官看过我的博客，知道我面试过阿里，虽然没进，不知道是不是加分项。</p>
<p>问的问题：</p>
<h1 id="安卓方面">安卓方面</h1><ul>
<li><p>activity生命周期。<br>都说出来了。</p>
</li>
<li><p>activity的启动方式有哪些,singleTask与singleInstance的应用场景。<br>场景只说了singleInstance就 问下一个问题了，举了一个闹钟的例子，之前网上看的。<br><a href="http://xiazdong.me/2015/03/08/android-launchmode-application/" target="_blank" rel="external">http://xiazdong.me/2015/03/08/android-launchmode-application/</a></p>
</li>
<li><p>线程与进程的区别<br>大概说了一下，线程是最小的进程，一个进程内的线程共享资源，一个app就是一个进程等等，说的有点模糊。<br>​</p>
</li>
<li>universal image loader的运行流程，存储图片的方式、原理。<br>之前两次阿里面试都问到了类似的问题，于是看了它的源码。<br>这次基本上回答出来了吧。默认用的LruCache，然后原理也说了下。</li>
</ul>
<a id="more"></a>
<h1 id="网络方面">网络方面</h1><ul>
<li><p>网络的七层架构?<br>7 应用层 6 表示层 5 会话层 4 传输层 3 网络层 2 数据链路层 1 物理层<br>我说的时候会话层和物理层没有说出来。</p>
</li>
<li><p>tcp 与 udp的区别，在哪一层？<br>可靠与不可靠。接收端有无检测等等。<br>在传输层。</p>
</li>
<li><p>socket的作用，运行在哪一层？<br>不是很了解，只回答传输数据的</p>
</li>
<li><p>http与https的区别<br>只说了https更安全。。具体的也不知道</p>
</li>
</ul>
<h1 id="数据库方面">数据库方面</h1><ul>
<li><p>distinct的作用<br>去除一个表中某个字段重复的，用于返回唯一不同的值。。</p>
</li>
<li><p>我说用过orm，为什么要用orm?<br>因为好奇，而且方便，提供了编译检查，然后说了下编译检查的好处。</p>
</li>
<li><p>如果让我实现一个orm会用到哪些技术？<br>用反射获取一个类的各种属性来生成数据库的表和字段。<br>注解定义关键字方便orm的使用。</p>
</li>
</ul>
<h1 id="语法方面">语法方面</h1><ul>
<li><p>java的新特性<br>我回答了最希望看到的就是java 8中的lambda表达式。问了lambad的原理，不清楚。</p>
</li>
<li><p>我说写过c#，问我c#中的委托用过吗，是怎么样的？<br>不清楚怎么表达，结果就说感觉是代理模式的一种实现。然后就问了一下单例模式。<br>其实应该回答类似于c++的函数指针，通过间接的方式调用其他函数的。</p>
</li>
</ul>
<h1 id="算法方面">算法方面</h1><ul>
<li><p>有哪些排序算法，时间复杂度是多少？<br>冒泡，选择，快速排序，堆排序，桶排序等等。<br>冒泡选择是O(N^2),快排是O(n*logN)</p>
</li>
<li><p>冒泡与选择的区别？<br>代码肯定会写，但不知道怎么描述，大概说了一下选择是先找出最小的放到第一个，冒泡是左右两个比较。</p>
</li>
<li><p>存储图的方式有哪几个？<br>答：邻接矩阵与邻接表。</p>
</li>
<li><p>求最短路的方法？<br>答：迪杰斯特拉算法,spfa算法，但是具体过程回答的很模糊，没有准备。</p>
</li>
<li><p>有一块机械表，一天中时分秒重合的次数？<br>这个要在纸上写出具体代码，想了一下就是遍历一天中所有秒数，然后算出三个指针的角度进行比较。<br>写完后他问我有没有更好的办法，没有想出来。</p>
</li>
</ul>
<p>因为知道我做过ACM,然后问了模拟退火算法，神经网络，遗传算法，只是要求大概的讲讲<br>只知道和人工智能有关，基本说不上来= =。</p>
<p>面完过了一会儿hr就告诉我，说我基础不错，应该能进，然后过了4个小时offer就发过来了，还是挺开心的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>总的来说感觉比较轻松，可能是因为这次只是实习生面试。<br>面试官看过我的博客，知道我面试过阿里，虽然没进，不知道是不是加分项。</p>
<p>问的问题：</p>
<h1 id="安卓方面">安卓方面</h1><ul>
<li><p>activity生命周期。<br>都说出来了。</p>
</li>
<li><p>activity的启动方式有哪些,singleTask与singleInstance的应用场景。<br>场景只说了singleInstance就 问下一个问题了，举了一个闹钟的例子，之前网上看的。<br><a href="http://xiazdong.me/2015/03/08/android-launchmode-application/">http://xiazdong.me/2015/03/08/android-launchmode-application/</a></p>
</li>
<li><p>线程与进程的区别<br>大概说了一下，线程是最小的进程，一个进程内的线程共享资源，一个app就是一个进程等等，说的有点模糊。<br>​</p>
</li>
<li>universal image loader的运行流程，存储图片的方式、原理。<br>之前两次阿里面试都问到了类似的问题，于是看了它的源码。<br>这次基本上回答出来了吧。默认用的LruCache，然后原理也说了下。</li>
</ul>]]>
    
    </summary>
    
      <category term="面试" scheme="http://seewhy93.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[象文面试总结]]></title>
    <link href="http://seewhy93.github.io/2015/07/15/xiangweninterview/"/>
    <id>http://seewhy93.github.io/2015/07/15/xiangweninterview/</id>
    <published>2015-07-15T12:13:40.000Z</published>
    <updated>2015-09-29T17:16:12.000Z</updated>
    <content type="html"><![CDATA[<p>昨天接到一个电话，说是在网上看到我的简历，问要不要去面试。<br>上一次面试是阿里的，结果惨败。于是想见识一些普通公司的面试，就答应了。<br>然后就定在今天下午。</p>
<p>提前一天下了他们公司的app，是做动态壁纸的，效果做的很酷炫。<br>这里应该能想到面试会问动画的问题，但是完全没有准备。结果今天问到动画就说不会。</p>
<p>下午两点多来到公司，然后填了一张表格就开始面试了。</p>
<p>一面比较随意，面试官感觉就比我大几岁。</p>
<p>下面是大致对话内容<br>“你的字写得好难看”</p>
<p>“嗯，是的”</p>
<a id="more"></a>
<p>“做的好多啊，c#，ios都做过。”</p>
<p>“但是都学得很水的。”</p>
<p>后来问了在github上有没有参与过什么开源项目。</p>
<p>感觉说没有不太好，我就回答了前几天看了一点eventBus的源码。收获很大，它用了观察者模式。</p>
<p>然后他说那个rxJava也是这样子的，也没问观察者模式的具体内容。</p>
<p>又问了做过的项目，我就把做过的酒店app拿出来说。</p>
<p>“有没有用过recyclerview</p>
<p>“有的”，我就把app上的横向category给他看，</p>
<p>“有没有哪个功能或者Bug是花了很长时间解决的”<br>这个以前阿里面的时候也问过，算是固定模式吧。<br>我说了一下实现播放器功能时和百度sdk冲突的事情。<br>然后又随意问了一些，整个过程比较轻松，主要是在问app上的功能怎么实现的。</p>
<p>后来换了一个人，大概是主管之类的。<br>气氛一下子变得很严肃= =</p>
<p>然后开始问：</p>
<ul>
<li><p>问了view的原理<br>我说view内部是先通过measure测量出每个元素的宽高，<br>然后用layout确定位置，最后draw出来。</p>
</li>
<li><p>问view中的类结构<br>我回答viewGroup继承自view,然后viewGroup下有各种layout。<br>答得也不是很完整。</p>
</li>
<li><p>问用过哪些eclipse的快捷键。<br>我有点无语，怎么还问快捷键的。<br>然后说我用android studio的。<br>“哦，那说一下as里常用的快捷键”<br>“我快捷键都自定义过了”<br>“嗯，那具体说一下”<br>“比如说cmd + E “最近文件 “双shift”快速搜索 “cmd+R”运行等等<br>“怎么快速搜索一个函数”<br>这个我忘记了，然后想到了vim的搜索，于是回答<br>“打一个/，然后搜函数名就可以了，我装了vim的插件”<br>“哦”</p>
</li>
<li><p>问adb用过没<br>我说用来安装卸载程序了</p>
</li>
<li><p>在系统低内存的时候，有个onLowMemory函数有没有实现过。<br>没有。应该是要在里面释放一下资源吧。</p>
</li>
<li><p>ActivityThread了解吗？<br>好像是用来启动activity的。</p>
</li>
<li><p>activity 启动模式了解吗？<br>这个我前几天看过，于是自信的开始讲<br>一共有4种模式standard ,singleTask,singleTop, singleInstance。<br>然后讲他们的区别和使用场景，讲一半的时候他来了个电话，接完就开始下一个问题。<br>我都还没说完，唉╮(╯_╰)╭</p>
</li>
<li><p>有没有做过按钮点击时状态变化？<br>回想了一下酒店app确实没有这样的按钮。<br>脑子有点蒙，就直接回答了 “没有”，<br>这个问题其实是知道答案的，在xml里面定义一个selector设置不同状态的图片。<br>然后他说了这样效果很不好，为什么不提出来，我就没说话了。</p>
</li>
<li><p>平时有看什么书？<br>我最近在看的一本是《Effective java》，还有一本《android的设计与实现》</p>
</li>
<li>有什么非技术类的书？<br>以前看过一本《黑客与画家》</li>
<li>问了我对加班有什么看法，（我刚开始听成java了(╯□╰)） 我说短期的加班可以接受，但是长期不行。</li>
</ul>
<p>后面又问了几个点都没答上来</p>
<ul>
<li>logcat中可以搜索关键字，那怎么搜索不包含关键字的内容。</li>
<li>机型适配,android的density(记不清了)</li>
<li>setContentview内部实现</li>
<li>动画</li>
<li>自定义控件的三个构造函数区别</li>
</ul>
<p>最后问了下我有没有什么想问他的（也是固定模式），<br>我问学习安卓，有什么好的经验或者学习方法。（这个问题我昨天也问阿里的面试官，回答是只能不断写代码）<br>他跟讲了很久，感觉是很认真的在回答吧。<br>主要内容是找到自己的兴趣，比如说动画，网络，然后把这方面钻研透。<br>又说要在高强度的项目中磨练自己，这样才能快速进步。</p>
<p>最后，他对我的评价是学的东西还都是浮在表面，没有深入了解进去。<br>然后又安慰我，刚才那些问题就算工作一两年的也不一定能答出来。</p>
<p>这次面试问的全都是安卓开发相关的，没有问一些算法、操作系统、设计模式之类的东西。<br>可能是大公司才喜欢问这些吧。</p>
<p>关于平时用到的一些控件，也确实很少关注底层实现。主要还是学习习惯的问题，想到过很多事情，但是很少去做，然后过一段时间就忘记了。虽然平时有做笔记，但是缺少定时的回顾。</p>
<p>总的来说，还是一次失败的面试。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天接到一个电话，说是在网上看到我的简历，问要不要去面试。<br>上一次面试是阿里的，结果惨败。于是想见识一些普通公司的面试，就答应了。<br>然后就定在今天下午。</p>
<p>提前一天下了他们公司的app，是做动态壁纸的，效果做的很酷炫。<br>这里应该能想到面试会问动画的问题，但是完全没有准备。结果今天问到动画就说不会。</p>
<p>下午两点多来到公司，然后填了一张表格就开始面试了。</p>
<p>一面比较随意，面试官感觉就比我大几岁。</p>
<p>下面是大致对话内容<br>“你的字写得好难看”</p>
<p>“嗯，是的”</p>]]>
    
    </summary>
    
      <category term="面试" scheme="http://seewhy93.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android fragment]]></title>
    <link href="http://seewhy93.github.io/2015/05/09/fragment%E8%A7%A3%E6%9E%90/"/>
    <id>http://seewhy93.github.io/2015/05/09/fragment解析/</id>
    <published>2015-05-09T01:26:04.000Z</published>
    <updated>2015-09-29T17:16:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p>fragment是android 3.0（API 11） 中引入的。可以将fragment看成是activity中的一个模块，也有自己的生命周期，能够处理用户事件。</p>
<p>通过fragment可以方便的实现在多个activity中实现相同的布局。在做android平板开发时，可以和手机程序共用同一段代码。</p>
<p>如果需要在界面中动态添加、替换、删除某一块模块，也可以通过fragment实现。</p>
<a id="more"></a>
<h1 id="基本使用方式">基本使用方式</h1><h2 id="静态使用">静态使用</h2><p> 首先创建一个简单的布局文件fragment_simple.xml，当做fragment的布局，里面代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span> <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span> <span class="attribute">android:text</span>=<span class="value">"这是一个简单的fragment"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后新建文件SimpleFragment, 继承自Fragment，重写onCreateView方法</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function">View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">return</span> inflater.<span class="title">inflate</span><span class="params">(R.layout.fragment_simple, container, <span class="keyword">false</span>)</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>最后在需要使用的activity中加入，通过name属性指定具体使用哪一个fragment</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;fragment</span><br><span class="line">       android:<span class="property">id</span>=<span class="string">"@+id/fragment_static"</span></span><br><span class="line">       android:<span class="property">name</span>=<span class="string">"com.example.seewhy.androidfragmentdemo.SimpleFragment"</span></span><br><span class="line">       android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">       android:layout_height=<span class="string">"match_parent"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="动态使用">动态使用</h2><p>通过fragment可以使程序在运行过程中替换某一块界面，比如我想在点击一个button之后显示一块内容。<br>先要在布局文件中创建一个容器,定义id为container。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FrameLayout</span><br><span class="line">       android:<span class="property">id</span>=<span class="string">"@+id/container"</span></span><br><span class="line">       android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">       android:layout_height=<span class="string">"match_parent"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>然后在button的onClick中写如下面这段代码，实现将container替换为自己需要的fragment。<br>其中transaction就是事务的意思，在manager.beginTransaction与transaction.commit();之间的代码，要么全部执行成功，如果某一步执行失败，那么之前执行的也都会被撤销，保证事务的原子性。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager manager = getFragmentManager();</span><br><span class="line">FragmentTransaction <span class="keyword">transaction</span> = manager.beginTransaction();</span><br><span class="line"><span class="keyword">transaction</span>.replace(R.<span class="property">id</span>.container, new SimpleFragment());</span><br><span class="line"><span class="keyword">transaction</span>.commit();</span><br></pre></td></tr></table></figure>
<p>常用的FragmentTransaction操作有add、remove、hide、addToBackStack等等。</p>
<h1 id="使用v4包还是app包">使用v4包还是app包</h1><p>fragment同时存在于android.support.v4.app和android.app两个包中。其中v4包是为了使android 3.0之前的系统能够使用fragment而存在。选择的时候，如果能够确保使用环境在android 3.0以上，那么应该使用app包中的fragment。Android官方文档中的Fragment的例子也是以app包中的Fragment来讲解的。如果需要兼容低版本android,那么就使用v4，v4包最低能兼容到android 1.6。<br>    但是，项目中不能同时存在v4和app两个包中的fragment,只能选择其中一个使用。<br>以下是在v4包中使用fragment的注意事项</p>
<ol>
<li>如果使用了v4包的fragment，那么所在的Activity一定要继承FragmentActivity。</li>
<li>FragmentManager()需要换成getSupportFragmentManager()</li>
</ol>
<h1 id="生命周期">生命周期</h1><p>这个是从官网找来的fragment生命周期图,可以看到Fragment比Activity多了几个额外的生命周期回调方法：</p>
<ul>
<li><p>onAttach(Activity)-<br>当Fragment与Activity发生关联时调用。</p>
</li>
<li><p>onCreateView(LayoutInflater, ViewGroup,Bundle)<br>创建该Fragment的视图</p>
</li>
<li><p>onActivityCreated(Bundle)<br>当Activity的onCreate方法返回时调用</p>
</li>
<li><p>onDestoryView()<br>与onCreateView想对应，当该Fragment的视图被移除时调</p>
</li>
<li><p>onDetach()<br>与onAttach相对应，当Fragment与Activity关联被取消时调用<br>注意：除了onCreateView，其他的所有方法如果你重写了，必须调用父类对于该方法的实现，</p>
</li>
</ul>
<p><img src="http://7xiw1r.com1.z0.glb.clouddn.com/fragment_lifecycle.png" alt=""></p>
<h1 id="其他">其他</h1><p>以上介绍了fragment基本的使用方式。<br>官方还提供了ListFragment用于显示在listview,<br>FragmentPagerAdapter用于fragment与pagerAdapter结合使用。<br>如果需要在pageAdapter切换时保留fragment的数据，可以使用FragmentStatePagerAdapter。</p>
<blockquote>
<p>FragmentPagerAdapter：对于不再需要的fragment，选择调用detach方法，仅销毁视图，并不会销毁fragment实例。</p>
<p>FragmentStatePagerAdapter：会销毁不再需要的fragment，当当前事务提交以后，会彻底的将fragmeng从当前Activity的FragmentManager中移除，state标明，销毁时，会将其onSaveInstanceState(Bundle outState)中的bundle信息保存下来，当用户切换回来，可以通过该bundle恢复生成新的fragment，也就是说，你可以在onSaveInstanceState(Bundle outState)方法中保存一些数据，在onCreate中进行恢复创建。</p>
<p>如上所说，使用FragmentStatePagerAdapter当然更省内存，但是销毁新建也是需要时间的。一般情况下，如果你是制作主页面，就3、4个Tab，那么可以选择使用FragmentPagerAdapter，如果你是用于ViewPager展示数量特别多的条目时，那么建议使用FragmentStatePagerAdapter。</p>
</blockquote>
<p>还有最新的sdk已经把TabActivity标记为deprecated，如果要实现tabbar的效果，应该使用FragmentTabHost。</p>
<p>DialogFragment在android 3.0时被引入。是一种特殊的Fragment，用于在Activity的内容之上展示一个模态的对话框。典型的用于：展示警告框，输入框，确认框等等。<a href="http://blog.csdn.net/lmj623565791/article/details/37815413" target="_blank" rel="external">具体可以看这里</a></p>
<h1 id="参考资料">参考资料</h1><ul>
<li><a href="http://www.it165.net/pro/html/201411/26897.html" target="_blank" rel="external">Fragment用app包还是v4包解析</a> </li>
<li><a href="http://developer.android.com/guide/components/fragments.html" target="_blank" rel="external">官方fragment使用指南</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/37970961" target="_blank" rel="external">Android Fragment 真正的完全解析</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p>fragment是android 3.0（API 11） 中引入的。可以将fragment看成是activity中的一个模块，也有自己的生命周期，能够处理用户事件。</p>
<p>通过fragment可以方便的实现在多个activity中实现相同的布局。在做android平板开发时，可以和手机程序共用同一段代码。</p>
<p>如果需要在界面中动态添加、替换、删除某一块模块，也可以通过fragment实现。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://seewhy93.github.io/tags/Android/"/>
    
      <category term="fragment" scheme="http://seewhy93.github.io/tags/fragment/"/>
    
  </entry>
  
</feed>